{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Blueprint \u00b6 Architectural frameworks and toolkits for bootstrapping modern Android codebases, written in Kotlin . Motivation \u00b6 These days whenever I kickoff a new Android project I always start by adding a bunch of infrastructure code (frameworks and toolkits) I developed over the years as they work really well in modern Android codebases which follow Clean Architecture and reactive paradigm , with strong emphasis on automated UI testing . These frameworks and toolkits have now become a library. Dependencies \u00b6 Blueprint offers multiple independent artifacts covering different use cases. But they are all \u201coptional\u201d which means you can choose to only use the ones that make sense for your codebase. Dependencies are hosted on Maven Central . Latest stable version: def blueprint_version = \"1.12.0\" If you use Kotlin Coroutines and Flow : // Building Interactors based on Kotlin Coroutines and Flow implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-coroutines:${blueprint_version}\" // Wrapper API for doing async work with Kotlin CoroutineDispatcher implementation \"io.github.reactivecircus.blueprint:blueprint-async-coroutines:${blueprint_version}\" // Android UI extensions, utilities and widgets implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" // Android UI testing framework with Testing Robot DSL implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\" If you use RxJava 2 : // Building Interactors based on RxJava 2 implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx2:${blueprint_version}\" // Wrapper API for doing async work with RxJava 2 Schedulers implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx2:${blueprint_version}\" // Android UI extensions, utilities and widgets implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" // Android UI testing framework with Testing Robot DSL implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\" If you use RxJava 3 : // Building Interactors based on RxJava 3 implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx3:${blueprint_version}\" // Wrapper API for doing async work with RxJava 3 Schedulers implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx3:${blueprint_version}\" // Android UI extensions, utilities and widgets implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" // Android UI testing framework with Testing Robot DSL implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository . Samples \u00b6 There are a couple of sample apps demonstrating how you may use Blueprint , one based on Kotlin Coroutines and the other one based on RxJava 2 . Overview \u00b6 The following is a high-level overview of what each Blueprint artifact does. For details and sample usage please check the samples and the documentation ( README.md ) in each of the sub-projects. Blueprint Interactor Coroutines \u00b6 This artifact provides 2 base classes for building Interactors (use case in Clean Architecture): SuspendingInteractor for single-shot tasks FlowInteractor for cold streams Please check blueprint-interactor-coroutines for details. Blueprint Async Coroutines \u00b6 This artifact provides a CoroutineDispatcherProvider API for encapsulating the threading behavior with Kotlin CoroutineDispatcher. Please check blueprint-async-coroutines for details. Blueprint Interactor RxJava 2 \u00b6 This artifact provides 3 base classes for building Interactors (use case in Clean Architecture): SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Please check blueprint-interactor-rx2 for details. Blueprint Async RxJava 2 \u00b6 This artifact provides a SchedulerProvider API for encapsulating the threading behavior with RxJava 2 Schedulers. Please check blueprint-async-rx2 for details. Blueprint Interactor RxJava 3 \u00b6 This artifact provides 3 base classes for building Interactors (use case in Clean Architecture): SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Please check blueprint-interactor-rx3 for details. Blueprint Async RxJava 3 \u00b6 This artifact provides a SchedulerProvider API for encapsulating the threading behavior with RxJava 3 Schedulers. Please check blueprint-async-rx3 for details. Blueprint UI \u00b6 This artifact provides convenient Kotlin extensions and widgets for working with the Android UI toolkit. Please check blueprint-ui for details. Blueprint Testing Robot \u00b6 This artifact provides a UI testing framework and Testing Robot DSL for authoring structured, readable, and framework-agnostic UI tests. Please check blueprint-testing-robot for details. License \u00b6 Copyright 2019 Yang Chen Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#blueprint","text":"Architectural frameworks and toolkits for bootstrapping modern Android codebases, written in Kotlin .","title":"Blueprint"},{"location":"#motivation","text":"These days whenever I kickoff a new Android project I always start by adding a bunch of infrastructure code (frameworks and toolkits) I developed over the years as they work really well in modern Android codebases which follow Clean Architecture and reactive paradigm , with strong emphasis on automated UI testing . These frameworks and toolkits have now become a library.","title":"Motivation"},{"location":"#dependencies","text":"Blueprint offers multiple independent artifacts covering different use cases. But they are all \u201coptional\u201d which means you can choose to only use the ones that make sense for your codebase. Dependencies are hosted on Maven Central . Latest stable version: def blueprint_version = \"1.12.0\" If you use Kotlin Coroutines and Flow : // Building Interactors based on Kotlin Coroutines and Flow implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-coroutines:${blueprint_version}\" // Wrapper API for doing async work with Kotlin CoroutineDispatcher implementation \"io.github.reactivecircus.blueprint:blueprint-async-coroutines:${blueprint_version}\" // Android UI extensions, utilities and widgets implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" // Android UI testing framework with Testing Robot DSL implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\" If you use RxJava 2 : // Building Interactors based on RxJava 2 implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx2:${blueprint_version}\" // Wrapper API for doing async work with RxJava 2 Schedulers implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx2:${blueprint_version}\" // Android UI extensions, utilities and widgets implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" // Android UI testing framework with Testing Robot DSL implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\" If you use RxJava 3 : // Building Interactors based on RxJava 3 implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx3:${blueprint_version}\" // Wrapper API for doing async work with RxJava 3 Schedulers implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx3:${blueprint_version}\" // Android UI extensions, utilities and widgets implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" // Android UI testing framework with Testing Robot DSL implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\" Snapshots of the development version are available in Sonatype\u2019s snapshots repository .","title":"Dependencies"},{"location":"#samples","text":"There are a couple of sample apps demonstrating how you may use Blueprint , one based on Kotlin Coroutines and the other one based on RxJava 2 .","title":"Samples"},{"location":"#overview","text":"The following is a high-level overview of what each Blueprint artifact does. For details and sample usage please check the samples and the documentation ( README.md ) in each of the sub-projects.","title":"Overview"},{"location":"#blueprint-interactor-coroutines","text":"This artifact provides 2 base classes for building Interactors (use case in Clean Architecture): SuspendingInteractor for single-shot tasks FlowInteractor for cold streams Please check blueprint-interactor-coroutines for details.","title":"Blueprint Interactor Coroutines"},{"location":"#blueprint-async-coroutines","text":"This artifact provides a CoroutineDispatcherProvider API for encapsulating the threading behavior with Kotlin CoroutineDispatcher. Please check blueprint-async-coroutines for details.","title":"Blueprint Async Coroutines"},{"location":"#blueprint-interactor-rxjava-2","text":"This artifact provides 3 base classes for building Interactors (use case in Clean Architecture): SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Please check blueprint-interactor-rx2 for details.","title":"Blueprint Interactor RxJava 2"},{"location":"#blueprint-async-rxjava-2","text":"This artifact provides a SchedulerProvider API for encapsulating the threading behavior with RxJava 2 Schedulers. Please check blueprint-async-rx2 for details.","title":"Blueprint Async RxJava 2"},{"location":"#blueprint-interactor-rxjava-3","text":"This artifact provides 3 base classes for building Interactors (use case in Clean Architecture): SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Please check blueprint-interactor-rx3 for details.","title":"Blueprint Interactor RxJava 3"},{"location":"#blueprint-async-rxjava-3","text":"This artifact provides a SchedulerProvider API for encapsulating the threading behavior with RxJava 3 Schedulers. Please check blueprint-async-rx3 for details.","title":"Blueprint Async RxJava 3"},{"location":"#blueprint-ui","text":"This artifact provides convenient Kotlin extensions and widgets for working with the Android UI toolkit. Please check blueprint-ui for details.","title":"Blueprint UI"},{"location":"#blueprint-testing-robot","text":"This artifact provides a UI testing framework and Testing Robot DSL for authoring structured, readable, and framework-agnostic UI tests. Please check blueprint-testing-robot for details.","title":"Blueprint Testing Robot"},{"location":"#license","text":"Copyright 2019 Yang Chen Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 1.12.0 \u00b6 2020-08-16 Update to Kotlin 1.4.0 and Coroutines 1.3.9. Enable explicit API mode. Update AndroidX and MDC. Version 1.11.0 \u00b6 2020-07-23 Move all AndroidX dependencies to the latest stable version. Version 1.10.0 \u00b6 2020-07-17 New RobotAssertions.viewEndsWithText(@IdRes viewId: Int, expected: String) for asserting that a view has text that ends with the expected string. Fix RobotAssertions.viewStartsWithText(@IdRes viewId: Int, expected: String) . Depend on kotlin-sdtlib instead of kotlin-stdlib-jdk8 Update Coroutines, AndroidX and MDC. Version 1.9.0 \u00b6 2020-05-30 Breaking change: clickTextInputLayoutIcon(@IdRes viewId: Int, endIcon: Boolean) has been refactored into clickTextInputLayoutStartIcon(@IdRes viewId: Int) and clickTextInputLayoutEndIcon(@IdRes viewId: Int) . Breaking change: longClickTextInputLayoutIcon(@IdRes viewId: Int, endIcon: Boolean) has been refactored into longClickTextInputLayoutStartIcon(@IdRes viewId: Int) and longClickTextInputLayoutEndIcon(@IdRes viewId: Int) . New clickTextInputLayoutErrorIcon(@IdRes viewId: Int) and longClickTextInputLayoutErrorIcon(@IdRes viewId: Int) extensions on the TextInputLayout . Update AGP, Gradle, Coroutines, RxJava 3, AndroidX, MDC, detekt. Version 1.8.1 \u00b6 2020-05-10 Fix a publishing issue. Version 1.8.0 \u00b6 2020-05-09 Breaking change: Context.isAnimationOn is now a property extension. Update Kotlin, AGP, Coroutines, RxJava 3, AndroidX, detekt, LeakCanary. Coroutines sample has been updated to replace LiveData with the new StateFlow introduced in Coroutines 1.3.6. Version 1.7.1 \u00b6 2020-04-11 Update Kotlin, AGP, RxJava 2, RxJava 3, RxKotlin 3, AndroidX, detekt. Version 1.6.0 \u00b6 2020-03-09 New clearToolbarScrollFlags(@IdRes toolbarId: Int) for clearing any scrolling behavior on the toolbar . Internal improvements on blueprint-testing-robot . Version 1.5.0 \u00b6 2020-03-08 New onRecyclerViewIdle(@IdRes recyclerViewId: Int) for waiting until RecyclerView has no more pending updates. Fix RecyclerViewItemCountAssertion \u2018s param type nullability. Update Kotlin, AGP, Gradle, RxJava 2, RxJava 3, RxKotlin 3, RxAndroid 3, LeakCanary, AndroidX, MDC, detekt. Version 1.4.0 \u00b6 2020-01-19 Breaking change: blueprint-threading-coroutines has been renamed to blueprint-async-coroutines . Breaking change: blueprint-threading-rx2 has been renamed to blueprint-async-rx2 . Breaking change: blueprint-threading-rx3 has been renamed to blueprint-async-rx3 . Update Kotlin, AGP, Gradle, RxJava 2, RxJava 3, LeakCanary, AndroidX, MDC, JUnit, detekt. Version 1.3.1 \u00b6 2019-12-03 Fix RobotAssertions.textInputLayoutHasNoError which wasn\u2019t properly checking whether error message is empty. Update Kotlin, AGP, Gradle, RxJava 2, LeakCanary, AndroidX, MDC, kluent, detekt. Version 1.3.0 \u00b6 2019-10-17 New RobotAction for selecting a navigation item from the drawer. New RobotAction for clicking TextInputLayout \u2018s start / end icon. New RobotAction for long clicking TextInputLayout \u2018s start / end icon. Migrate to custom Gradle plugin for managing build configs. Update AGP, Gradle, RxJava 2, Coroutines, AndroidX, MDC, kluent, detekt. Improve samples. Version 1.2.0 \u00b6 2019-08-28 blueprint-ui - Added new extension for setting precomputed text on AppCompatTextView . Refactor blueprint-ui internals. Disable BuildConfig generation for Android library modules. Stop exposing resources from transitive dependencies for Android library modules. Update AGP, Gradle, RxJava 2, Coroutines, detekt, LeakCanary. Improve documentation. Version 1.1.0 \u00b6 2019-08-20 New RobotAction for clicking on the action button on the currently displayed snackbar. Refactor / simplify blueprint-testing-robot internals. Update RxJava 3 to RC2 - this is a breaking change as RxJava 3 base package now has rxjava3 . Update AGP, AndroidX, Coroutines, detekt. Improve documentation. Version 1.0.1 \u00b6 2019-08-02 Fix a publishing issue. All artifacts should now be available on Maven Central. Version 1.0.0 \u00b6 2019-08-02 This is the initial release of Blueprint - a collection of Architectural frameworks and toolkits for bootstrapping modern Android codebases. New: blueprint-interactor-coroutines artifact - supports building Interactors based on Kotlin Coroutines and Flow. New: blueprint-interactor-rx2 artifact - supports building Interactors based on RxJava 2. New: blueprint-interactor-rx3 artifact - supports building Interactors based on RxJava 3. Note that it currently uses RxJava 3.0.0-RC1, and RxAndroid has not yet been updated to target RxJava 3.x yet. New: blueprint-threading-coroutines artifact - provides encapsulation of threading behavior with Kotlin CoroutineDispatcher . New: blueprint-threading-rx2 artifact - provides encapsulation of threading behavior with RxJava 2 Scheduler . New: blueprint-threading-rx3 artifact - provides encapsulation of threading behavior with RxJava 3 Scheduler . Note that it currently uses RxJava 3.0.0-RC1, and RxAndroid has not yet been updated to target RxJava 3.x yet. New: blueprint-ui artifact - Kotlin extensions and widgets for working with the Android UI toolkit. New: blueprint-testing-robot artifact - UI testing framework and DSL for authoring structured, readable, and framework-agnostic UI tests.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-1120","text":"2020-08-16 Update to Kotlin 1.4.0 and Coroutines 1.3.9. Enable explicit API mode. Update AndroidX and MDC.","title":"Version 1.12.0"},{"location":"changelog/#version-1110","text":"2020-07-23 Move all AndroidX dependencies to the latest stable version.","title":"Version 1.11.0"},{"location":"changelog/#version-1100","text":"2020-07-17 New RobotAssertions.viewEndsWithText(@IdRes viewId: Int, expected: String) for asserting that a view has text that ends with the expected string. Fix RobotAssertions.viewStartsWithText(@IdRes viewId: Int, expected: String) . Depend on kotlin-sdtlib instead of kotlin-stdlib-jdk8 Update Coroutines, AndroidX and MDC.","title":"Version 1.10.0"},{"location":"changelog/#version-190","text":"2020-05-30 Breaking change: clickTextInputLayoutIcon(@IdRes viewId: Int, endIcon: Boolean) has been refactored into clickTextInputLayoutStartIcon(@IdRes viewId: Int) and clickTextInputLayoutEndIcon(@IdRes viewId: Int) . Breaking change: longClickTextInputLayoutIcon(@IdRes viewId: Int, endIcon: Boolean) has been refactored into longClickTextInputLayoutStartIcon(@IdRes viewId: Int) and longClickTextInputLayoutEndIcon(@IdRes viewId: Int) . New clickTextInputLayoutErrorIcon(@IdRes viewId: Int) and longClickTextInputLayoutErrorIcon(@IdRes viewId: Int) extensions on the TextInputLayout . Update AGP, Gradle, Coroutines, RxJava 3, AndroidX, MDC, detekt.","title":"Version 1.9.0"},{"location":"changelog/#version-181","text":"2020-05-10 Fix a publishing issue.","title":"Version 1.8.1"},{"location":"changelog/#version-180","text":"2020-05-09 Breaking change: Context.isAnimationOn is now a property extension. Update Kotlin, AGP, Coroutines, RxJava 3, AndroidX, detekt, LeakCanary. Coroutines sample has been updated to replace LiveData with the new StateFlow introduced in Coroutines 1.3.6.","title":"Version 1.8.0"},{"location":"changelog/#version-171","text":"2020-04-11 Update Kotlin, AGP, RxJava 2, RxJava 3, RxKotlin 3, AndroidX, detekt.","title":"Version 1.7.1"},{"location":"changelog/#version-160","text":"2020-03-09 New clearToolbarScrollFlags(@IdRes toolbarId: Int) for clearing any scrolling behavior on the toolbar . Internal improvements on blueprint-testing-robot .","title":"Version 1.6.0"},{"location":"changelog/#version-150","text":"2020-03-08 New onRecyclerViewIdle(@IdRes recyclerViewId: Int) for waiting until RecyclerView has no more pending updates. Fix RecyclerViewItemCountAssertion \u2018s param type nullability. Update Kotlin, AGP, Gradle, RxJava 2, RxJava 3, RxKotlin 3, RxAndroid 3, LeakCanary, AndroidX, MDC, detekt.","title":"Version 1.5.0"},{"location":"changelog/#version-140","text":"2020-01-19 Breaking change: blueprint-threading-coroutines has been renamed to blueprint-async-coroutines . Breaking change: blueprint-threading-rx2 has been renamed to blueprint-async-rx2 . Breaking change: blueprint-threading-rx3 has been renamed to blueprint-async-rx3 . Update Kotlin, AGP, Gradle, RxJava 2, RxJava 3, LeakCanary, AndroidX, MDC, JUnit, detekt.","title":"Version 1.4.0"},{"location":"changelog/#version-131","text":"2019-12-03 Fix RobotAssertions.textInputLayoutHasNoError which wasn\u2019t properly checking whether error message is empty. Update Kotlin, AGP, Gradle, RxJava 2, LeakCanary, AndroidX, MDC, kluent, detekt.","title":"Version 1.3.1"},{"location":"changelog/#version-130","text":"2019-10-17 New RobotAction for selecting a navigation item from the drawer. New RobotAction for clicking TextInputLayout \u2018s start / end icon. New RobotAction for long clicking TextInputLayout \u2018s start / end icon. Migrate to custom Gradle plugin for managing build configs. Update AGP, Gradle, RxJava 2, Coroutines, AndroidX, MDC, kluent, detekt. Improve samples.","title":"Version 1.3.0"},{"location":"changelog/#version-120","text":"2019-08-28 blueprint-ui - Added new extension for setting precomputed text on AppCompatTextView . Refactor blueprint-ui internals. Disable BuildConfig generation for Android library modules. Stop exposing resources from transitive dependencies for Android library modules. Update AGP, Gradle, RxJava 2, Coroutines, detekt, LeakCanary. Improve documentation.","title":"Version 1.2.0"},{"location":"changelog/#version-110","text":"2019-08-20 New RobotAction for clicking on the action button on the currently displayed snackbar. Refactor / simplify blueprint-testing-robot internals. Update RxJava 3 to RC2 - this is a breaking change as RxJava 3 base package now has rxjava3 . Update AGP, AndroidX, Coroutines, detekt. Improve documentation.","title":"Version 1.1.0"},{"location":"changelog/#version-101","text":"2019-08-02 Fix a publishing issue. All artifacts should now be available on Maven Central.","title":"Version 1.0.1"},{"location":"changelog/#version-100","text":"2019-08-02 This is the initial release of Blueprint - a collection of Architectural frameworks and toolkits for bootstrapping modern Android codebases. New: blueprint-interactor-coroutines artifact - supports building Interactors based on Kotlin Coroutines and Flow. New: blueprint-interactor-rx2 artifact - supports building Interactors based on RxJava 2. New: blueprint-interactor-rx3 artifact - supports building Interactors based on RxJava 3. Note that it currently uses RxJava 3.0.0-RC1, and RxAndroid has not yet been updated to target RxJava 3.x yet. New: blueprint-threading-coroutines artifact - provides encapsulation of threading behavior with Kotlin CoroutineDispatcher . New: blueprint-threading-rx2 artifact - provides encapsulation of threading behavior with RxJava 2 Scheduler . New: blueprint-threading-rx3 artifact - provides encapsulation of threading behavior with RxJava 3 Scheduler . Note that it currently uses RxJava 3.0.0-RC1, and RxAndroid has not yet been updated to target RxJava 3.x yet. New: blueprint-ui artifact - Kotlin extensions and widgets for working with the Android UI toolkit. New: blueprint-testing-robot artifact - UI testing framework and DSL for authoring structured, readable, and framework-agnostic UI tests.","title":"Version 1.0.0"},{"location":"api/blueprint-async-coroutines/","text":"blueprint-async-coroutines Packages \u00b6 Name Summary reactivecircus.blueprint.async.coroutines Index \u00b6 All Types","title":"blueprint-async-coroutines"},{"location":"api/blueprint-async-coroutines/#packages","text":"Name Summary reactivecircus.blueprint.async.coroutines","title":"Packages"},{"location":"api/blueprint-async-coroutines/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-async-coroutines/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.blueprint.async.coroutines.CoroutineDispatcherProvider \u00b6 A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"Index"},{"location":"api/blueprint-async-coroutines/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/blueprint-async-coroutines/alltypes/#reactivecircusblueprintasynccoroutinescoroutinedispatcherprovider","text":"A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"reactivecircus.blueprint.async.coroutines.CoroutineDispatcherProvider"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/","text":"blueprint-async-coroutines / reactivecircus.blueprint.async.coroutines Package reactivecircus.blueprint.async.coroutines \u00b6 Types \u00b6 Name Summary CoroutineDispatcherProvider A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. class CoroutineDispatcherProvider","title":"Index"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/#package-reactivecircusblueprintasynccoroutines","text":"","title":"Package reactivecircus.blueprint.async.coroutines"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/#types","text":"Name Summary CoroutineDispatcherProvider A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. class CoroutineDispatcherProvider","title":"Types"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/","text":"blueprint-async-coroutines / reactivecircus.blueprint.async.coroutines / CoroutineDispatcherProvider CoroutineDispatcherProvider \u00b6 class CoroutineDispatcherProvider A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Constructors \u00b6 Name Summary <init> A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. CoroutineDispatcherProvider(io: CoroutineDispatcher, computation: CoroutineDispatcher, ui: CoroutineDispatcher) Properties \u00b6 Name Summary computation Dispatcher for computational work val computation: CoroutineDispatcher io Dispatcher for IO-bound work val io: CoroutineDispatcher ui Dispatcher for UI work val ui: CoroutineDispatcher","title":"Index"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/#coroutinedispatcherprovider","text":"class CoroutineDispatcherProvider A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"CoroutineDispatcherProvider"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/#constructors","text":"Name Summary <init> A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. CoroutineDispatcherProvider(io: CoroutineDispatcher, computation: CoroutineDispatcher, ui: CoroutineDispatcher)","title":"Constructors"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/#properties","text":"Name Summary computation Dispatcher for computational work val computation: CoroutineDispatcher io Dispatcher for IO-bound work val io: CoroutineDispatcher ui Dispatcher for UI work val ui: CoroutineDispatcher","title":"Properties"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/-init-/","text":"blueprint-async-coroutines / reactivecircus.blueprint.async.coroutines / CoroutineDispatcherProvider / <init> <init> \u00b6 CoroutineDispatcherProvider(io: CoroutineDispatcher, computation: CoroutineDispatcher, ui: CoroutineDispatcher) A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":" init "},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/-init-/#init","text":"CoroutineDispatcherProvider(io: CoroutineDispatcher, computation: CoroutineDispatcher, ui: CoroutineDispatcher) A wrapper class for common coroutine dispatchers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"&lt;init&gt;"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/computation/","text":"blueprint-async-coroutines / reactivecircus.blueprint.async.coroutines / CoroutineDispatcherProvider / computation computation \u00b6 val computation: CoroutineDispatcher Dispatcher for computational work","title":"Computation"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/computation/#computation","text":"val computation: CoroutineDispatcher Dispatcher for computational work","title":"computation"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/io/","text":"blueprint-async-coroutines / reactivecircus.blueprint.async.coroutines / CoroutineDispatcherProvider / io io \u00b6 val io: CoroutineDispatcher Dispatcher for IO-bound work","title":"Io"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/io/#io","text":"val io: CoroutineDispatcher Dispatcher for IO-bound work","title":"io"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/ui/","text":"blueprint-async-coroutines / reactivecircus.blueprint.async.coroutines / CoroutineDispatcherProvider / ui ui \u00b6 val ui: CoroutineDispatcher Dispatcher for UI work","title":"Ui"},{"location":"api/blueprint-async-coroutines/reactivecircus.blueprint.async.coroutines/-coroutine-dispatcher-provider/ui/#ui","text":"val ui: CoroutineDispatcher Dispatcher for UI work","title":"ui"},{"location":"api/blueprint-async-rx2/","text":"blueprint-async-rx2 Packages \u00b6 Name Summary reactivecircus.blueprint.async.rx2 Index \u00b6 All Types","title":"blueprint-async-rx2"},{"location":"api/blueprint-async-rx2/#packages","text":"Name Summary reactivecircus.blueprint.async.rx2","title":"Packages"},{"location":"api/blueprint-async-rx2/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-async-rx2/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.blueprint.async.rx2.SchedulerProvider \u00b6 A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"Index"},{"location":"api/blueprint-async-rx2/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/blueprint-async-rx2/alltypes/#reactivecircusblueprintasyncrx2schedulerprovider","text":"A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"reactivecircus.blueprint.async.rx2.SchedulerProvider"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/","text":"blueprint-async-rx2 / reactivecircus.blueprint.async.rx2 Package reactivecircus.blueprint.async.rx2 \u00b6 Types \u00b6 Name Summary SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. class SchedulerProvider","title":"Index"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/#package-reactivecircusblueprintasyncrx2","text":"","title":"Package reactivecircus.blueprint.async.rx2"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/#types","text":"Name Summary SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. class SchedulerProvider","title":"Types"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/","text":"blueprint-async-rx2 / reactivecircus.blueprint.async.rx2 / SchedulerProvider SchedulerProvider \u00b6 class SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Constructors \u00b6 Name Summary <init> A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler) Properties \u00b6 Name Summary computation Scheduler for computational work val computation: Scheduler io Scheduler for IO-bound work val io: Scheduler ui Scheduler for UI work val ui: Scheduler","title":"Index"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/#schedulerprovider","text":"class SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"SchedulerProvider"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/#constructors","text":"Name Summary <init> A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler)","title":"Constructors"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/#properties","text":"Name Summary computation Scheduler for computational work val computation: Scheduler io Scheduler for IO-bound work val io: Scheduler ui Scheduler for UI work val ui: Scheduler","title":"Properties"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/-init-/","text":"blueprint-async-rx2 / reactivecircus.blueprint.async.rx2 / SchedulerProvider / <init> <init> \u00b6 SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler) A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":" init "},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/-init-/#init","text":"SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler) A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"&lt;init&gt;"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/computation/","text":"blueprint-async-rx2 / reactivecircus.blueprint.async.rx2 / SchedulerProvider / computation computation \u00b6 val computation: Scheduler Scheduler for computational work","title":"Computation"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/computation/#computation","text":"val computation: Scheduler Scheduler for computational work","title":"computation"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/io/","text":"blueprint-async-rx2 / reactivecircus.blueprint.async.rx2 / SchedulerProvider / io io \u00b6 val io: Scheduler Scheduler for IO-bound work","title":"Io"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/io/#io","text":"val io: Scheduler Scheduler for IO-bound work","title":"io"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/ui/","text":"blueprint-async-rx2 / reactivecircus.blueprint.async.rx2 / SchedulerProvider / ui ui \u00b6 val ui: Scheduler Scheduler for UI work","title":"Ui"},{"location":"api/blueprint-async-rx2/reactivecircus.blueprint.async.rx2/-scheduler-provider/ui/#ui","text":"val ui: Scheduler Scheduler for UI work","title":"ui"},{"location":"api/blueprint-async-rx3/","text":"blueprint-async-rx3 Packages \u00b6 Name Summary reactivecircus.blueprint.async.rx3 Index \u00b6 All Types","title":"blueprint-async-rx3"},{"location":"api/blueprint-async-rx3/#packages","text":"Name Summary reactivecircus.blueprint.async.rx3","title":"Packages"},{"location":"api/blueprint-async-rx3/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-async-rx3/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.blueprint.async.rx3.SchedulerProvider \u00b6 A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"Index"},{"location":"api/blueprint-async-rx3/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/blueprint-async-rx3/alltypes/#reactivecircusblueprintasyncrx3schedulerprovider","text":"A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"reactivecircus.blueprint.async.rx3.SchedulerProvider"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/","text":"blueprint-async-rx3 / reactivecircus.blueprint.async.rx3 Package reactivecircus.blueprint.async.rx3 \u00b6 Types \u00b6 Name Summary SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. class SchedulerProvider","title":"Index"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/#package-reactivecircusblueprintasyncrx3","text":"","title":"Package reactivecircus.blueprint.async.rx3"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/#types","text":"Name Summary SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. class SchedulerProvider","title":"Types"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/","text":"blueprint-async-rx3 / reactivecircus.blueprint.async.rx3 / SchedulerProvider SchedulerProvider \u00b6 class SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Constructors \u00b6 Name Summary <init> A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler) Properties \u00b6 Name Summary computation Scheduler for computational work val computation: Scheduler io Scheduler for IO-bound work val io: Scheduler ui Scheduler for UI work val ui: Scheduler","title":"Index"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/#schedulerprovider","text":"class SchedulerProvider A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"SchedulerProvider"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/#constructors","text":"Name Summary <init> A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler)","title":"Constructors"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/#properties","text":"Name Summary computation Scheduler for computational work val computation: Scheduler io Scheduler for IO-bound work val io: Scheduler ui Scheduler for UI work val ui: Scheduler","title":"Properties"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/-init-/","text":"blueprint-async-rx3 / reactivecircus.blueprint.async.rx3 / SchedulerProvider / <init> <init> \u00b6 SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler) A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":" init "},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/-init-/#init","text":"SchedulerProvider(io: Scheduler, computation: Scheduler, ui: Scheduler) A wrapper class for common Rx schedulers. An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing.","title":"&lt;init&gt;"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/computation/","text":"blueprint-async-rx3 / reactivecircus.blueprint.async.rx3 / SchedulerProvider / computation computation \u00b6 val computation: Scheduler Scheduler for computational work","title":"Computation"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/computation/#computation","text":"val computation: Scheduler Scheduler for computational work","title":"computation"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/io/","text":"blueprint-async-rx3 / reactivecircus.blueprint.async.rx3 / SchedulerProvider / io io \u00b6 val io: Scheduler Scheduler for IO-bound work","title":"Io"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/io/#io","text":"val io: Scheduler Scheduler for IO-bound work","title":"io"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/ui/","text":"blueprint-async-rx3 / reactivecircus.blueprint.async.rx3 / SchedulerProvider / ui ui \u00b6 val ui: Scheduler Scheduler for UI work","title":"Ui"},{"location":"api/blueprint-async-rx3/reactivecircus.blueprint.async.rx3/-scheduler-provider/ui/#ui","text":"val ui: Scheduler Scheduler for UI work","title":"ui"},{"location":"api/blueprint-interactor-common/","text":"blueprint-interactor-common Packages \u00b6 Name Summary reactivecircus.blueprint.interactor Index \u00b6 All Types","title":"blueprint-interactor-common"},{"location":"api/blueprint-interactor-common/#packages","text":"Name Summary reactivecircus.blueprint.interactor","title":"Packages"},{"location":"api/blueprint-interactor-common/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-interactor-common/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.blueprint.interactor.EmptyParams \u00b6 A special InteractorParams representing empty params. Use this when the interactor requires no params. | reactivecircus.blueprint.interactor.InteractorParams \u00b6 Interface representing params to be passed in for each interactor. Implement this for each interactor that requires specific params.","title":"Index"},{"location":"api/blueprint-interactor-common/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/blueprint-interactor-common/alltypes/#reactivecircusblueprintinteractoremptyparams","text":"A special InteractorParams representing empty params. Use this when the interactor requires no params. |","title":"reactivecircus.blueprint.interactor.EmptyParams"},{"location":"api/blueprint-interactor-common/alltypes/#reactivecircusblueprintinteractorinteractorparams","text":"Interface representing params to be passed in for each interactor. Implement this for each interactor that requires specific params.","title":"reactivecircus.blueprint.interactor.InteractorParams"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/","text":"blueprint-interactor-common / reactivecircus.blueprint.interactor Package reactivecircus.blueprint.interactor \u00b6 Types \u00b6 Name Summary EmptyParams A special InteractorParams representing empty params. Use this when the interactor requires no params. object EmptyParams : InteractorParams InteractorParams Interface representing params to be passed in for each interactor. Implement this for each interactor that requires specific params. interface InteractorParams","title":"Index"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/#package-reactivecircusblueprintinteractor","text":"","title":"Package reactivecircus.blueprint.interactor"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/#types","text":"Name Summary EmptyParams A special InteractorParams representing empty params. Use this when the interactor requires no params. object EmptyParams : InteractorParams InteractorParams Interface representing params to be passed in for each interactor. Implement this for each interactor that requires specific params. interface InteractorParams","title":"Types"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/-empty-params/","text":"blueprint-interactor-common / reactivecircus.blueprint.interactor / EmptyParams EmptyParams \u00b6 object EmptyParams : InteractorParams A special InteractorParams representing empty params. Use this when the interactor requires no params.","title":" empty params"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/-empty-params/#emptyparams","text":"object EmptyParams : InteractorParams A special InteractorParams representing empty params. Use this when the interactor requires no params.","title":"EmptyParams"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/-interactor-params/","text":"blueprint-interactor-common / reactivecircus.blueprint.interactor / InteractorParams InteractorParams \u00b6 interface InteractorParams Interface representing params to be passed in for each interactor. Implement this for each interactor that requires specific params. Inheritors \u00b6 Name Summary EmptyParams A special InteractorParams representing empty params. Use this when the interactor requires no params. object EmptyParams : InteractorParams","title":" interactor params"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/-interactor-params/#interactorparams","text":"interface InteractorParams Interface representing params to be passed in for each interactor. Implement this for each interactor that requires specific params.","title":"InteractorParams"},{"location":"api/blueprint-interactor-common/reactivecircus.blueprint.interactor/-interactor-params/#inheritors","text":"Name Summary EmptyParams A special InteractorParams representing empty params. Use this when the interactor requires no params. object EmptyParams : InteractorParams","title":"Inheritors"},{"location":"api/blueprint-interactor-coroutines/","text":"blueprint-interactor-coroutines Packages \u00b6 Name Summary reactivecircus.blueprint.interactor.coroutines Index \u00b6 All Types","title":"blueprint-interactor-coroutines"},{"location":"api/blueprint-interactor-coroutines/#packages","text":"Name Summary reactivecircus.blueprint.interactor.coroutines","title":"Packages"},{"location":"api/blueprint-interactor-coroutines/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-interactor-coroutines/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.blueprint.interactor.coroutines.FlowInteractor \u00b6 An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . | reactivecircus.blueprint.interactor.coroutines.SuspendingInteractor \u00b6 An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function.","title":"Index"},{"location":"api/blueprint-interactor-coroutines/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/blueprint-interactor-coroutines/alltypes/#reactivecircusblueprintinteractorcoroutinesflowinteractor","text":"An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . |","title":"reactivecircus.blueprint.interactor.coroutines.FlowInteractor"},{"location":"api/blueprint-interactor-coroutines/alltypes/#reactivecircusblueprintinteractorcoroutinessuspendinginteractor","text":"An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function.","title":"reactivecircus.blueprint.interactor.coroutines.SuspendingInteractor"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines Package reactivecircus.blueprint.interactor.coroutines \u00b6 Types \u00b6 Name Summary FlowInteractor An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . abstract class FlowInteractor<in P : InteractorParams, out R> SuspendingInteractor An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. abstract class SuspendingInteractor<in P : InteractorParams, out R>","title":"Index"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/#package-reactivecircusblueprintinteractorcoroutines","text":"","title":"Package reactivecircus.blueprint.interactor.coroutines"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/#types","text":"Name Summary FlowInteractor An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . abstract class FlowInteractor<in P : InteractorParams, out R> SuspendingInteractor An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. abstract class SuspendingInteractor<in P : InteractorParams, out R>","title":"Types"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / FlowInteractor FlowInteractor \u00b6 abstract class FlowInteractor<in P : InteractorParams, out R> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . Work will be executed on thread as specified by the dispatcher of the interactor. Constructors \u00b6 Name Summary <init> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . FlowInteractor() Properties \u00b6 Name Summary dispatcher The coroutine context this interactor should execute on. abstract val dispatcher: CoroutineDispatcher Functions \u00b6 Name Summary buildFlow Build a new Flow from this interactor. fun buildFlow(params: P): Flow<R> createFlow Create a Flow for this interactor. abstract fun createFlow(params: P): Flow<R>","title":"Index"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/#flowinteractor","text":"abstract class FlowInteractor<in P : InteractorParams, out R> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . Work will be executed on thread as specified by the dispatcher of the interactor.","title":"FlowInteractor"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/#constructors","text":"Name Summary <init> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . FlowInteractor()","title":"Constructors"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/#properties","text":"Name Summary dispatcher The coroutine context this interactor should execute on. abstract val dispatcher: CoroutineDispatcher","title":"Properties"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/#functions","text":"Name Summary buildFlow Build a new Flow from this interactor. fun buildFlow(params: P): Flow<R> createFlow Create a Flow for this interactor. abstract fun createFlow(params: P): Flow<R>","title":"Functions"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/-init-/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / FlowInteractor / <init> <init> \u00b6 FlowInteractor() An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . Work will be executed on thread as specified by the dispatcher of the interactor.","title":" init "},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/-init-/#init","text":"FlowInteractor() An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A FlowInteractor exposes a cold stream of values implemented with Kotlin Flow . Work will be executed on thread as specified by the dispatcher of the interactor.","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/build-flow/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / FlowInteractor / buildFlow buildFlow \u00b6 fun buildFlow(params: P): Flow<R> Build a new Flow from this interactor.","title":"Build flow"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/build-flow/#buildflow","text":"fun buildFlow(params: P): Flow<R> Build a new Flow from this interactor.","title":"buildFlow"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/create-flow/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / FlowInteractor / createFlow createFlow \u00b6 protected abstract fun createFlow(params: P): Flow<R> Create a Flow for this interactor.","title":"Create flow"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/create-flow/#createflow","text":"protected abstract fun createFlow(params: P): Flow<R> Create a Flow for this interactor.","title":"createFlow"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/dispatcher/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / FlowInteractor / dispatcher dispatcher \u00b6 abstract val dispatcher: CoroutineDispatcher The coroutine context this interactor should execute on.","title":"Dispatcher"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-flow-interactor/dispatcher/#dispatcher","text":"abstract val dispatcher: CoroutineDispatcher The coroutine context this interactor should execute on.","title":"dispatcher"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / SuspendingInteractor SuspendingInteractor \u00b6 abstract class SuspendingInteractor<in P : InteractorParams, out R> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. Work will be executed on thread as specified by the dispatcher of the interactor. Constructors \u00b6 Name Summary <init> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. SuspendingInteractor() Properties \u00b6 Name Summary dispatcher The coroutine context this interactor should execute on. abstract val dispatcher: CoroutineDispatcher Functions \u00b6 Name Summary doWork Define the work to be performed by this interactor. abstract suspend fun doWork(params: P): R execute Execute the the interactor. suspend fun execute(params: P): R","title":"Index"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/#suspendinginteractor","text":"abstract class SuspendingInteractor<in P : InteractorParams, out R> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. Work will be executed on thread as specified by the dispatcher of the interactor.","title":"SuspendingInteractor"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/#constructors","text":"Name Summary <init> An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. SuspendingInteractor()","title":"Constructors"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/#properties","text":"Name Summary dispatcher The coroutine context this interactor should execute on. abstract val dispatcher: CoroutineDispatcher","title":"Properties"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/#functions","text":"Name Summary doWork Define the work to be performed by this interactor. abstract suspend fun doWork(params: P): R execute Execute the the interactor. suspend fun execute(params: P): R","title":"Functions"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/-init-/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / SuspendingInteractor / <init> <init> \u00b6 SuspendingInteractor() An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. Work will be executed on thread as specified by the dispatcher of the interactor.","title":" init "},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/-init-/#init","text":"SuspendingInteractor() An interactor (use case in Clean Architecture) represents an execution unit of asynchronous work. A SuspendingInteractor returns a single response through a suspend function. Work will be executed on thread as specified by the dispatcher of the interactor.","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/dispatcher/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / SuspendingInteractor / dispatcher dispatcher \u00b6 abstract val dispatcher: CoroutineDispatcher The coroutine context this interactor should execute on.","title":"Dispatcher"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/dispatcher/#dispatcher","text":"abstract val dispatcher: CoroutineDispatcher The coroutine context this interactor should execute on.","title":"dispatcher"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/do-work/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / SuspendingInteractor / doWork doWork \u00b6 protected abstract suspend fun doWork(params: P): R Define the work to be performed by this interactor.","title":"Do work"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/do-work/#dowork","text":"protected abstract suspend fun doWork(params: P): R Define the work to be performed by this interactor.","title":"doWork"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/execute/","text":"blueprint-interactor-coroutines / reactivecircus.blueprint.interactor.coroutines / SuspendingInteractor / execute execute \u00b6 suspend fun execute(params: P): R Execute the the interactor.","title":"Execute"},{"location":"api/blueprint-interactor-coroutines/reactivecircus.blueprint.interactor.coroutines/-suspending-interactor/execute/#execute","text":"suspend fun execute(params: P): R Execute the the interactor.","title":"execute"},{"location":"api/blueprint-interactor-rx2/","text":"blueprint-interactor-rx2 Packages \u00b6 Name Summary reactivecircus.blueprint.interactor.rx2 Index \u00b6 All Types","title":"blueprint-interactor-rx2"},{"location":"api/blueprint-interactor-rx2/#packages","text":"Name Summary reactivecircus.blueprint.interactor.rx2","title":"Packages"},{"location":"api/blueprint-interactor-rx2/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-interactor-rx2/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.blueprint.interactor.rx2.CompletableInteractor \u00b6 Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . | reactivecircus.blueprint.interactor.rx2.ObservableInteractor \u00b6 Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . | reactivecircus.blueprint.interactor.rx2.SingleInteractor \u00b6 Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"Index"},{"location":"api/blueprint-interactor-rx2/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/blueprint-interactor-rx2/alltypes/#reactivecircusblueprintinteractorrx2completableinteractor","text":"Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . |","title":"reactivecircus.blueprint.interactor.rx2.CompletableInteractor"},{"location":"api/blueprint-interactor-rx2/alltypes/#reactivecircusblueprintinteractorrx2observableinteractor","text":"Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . |","title":"reactivecircus.blueprint.interactor.rx2.ObservableInteractor"},{"location":"api/blueprint-interactor-rx2/alltypes/#reactivecircusblueprintinteractorrx2singleinteractor","text":"Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"reactivecircus.blueprint.interactor.rx2.SingleInteractor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 Package reactivecircus.blueprint.interactor.rx2 \u00b6 Types \u00b6 Name Summary CompletableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class CompletableInteractor<P : InteractorParams> ObservableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class ObservableInteractor<P : InteractorParams, T> SingleInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class SingleInteractor<P : InteractorParams, T>","title":"Index"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/#package-reactivecircusblueprintinteractorrx2","text":"","title":"Package reactivecircus.blueprint.interactor.rx2"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/#types","text":"Name Summary CompletableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class CompletableInteractor<P : InteractorParams> ObservableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class ObservableInteractor<P : InteractorParams, T> SingleInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class SingleInteractor<P : InteractorParams, T>","title":"Types"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / CompletableInteractor CompletableInteractor \u00b6 abstract class CompletableInteractor<P : InteractorParams> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . Constructors \u00b6 Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Functions \u00b6 Name Summary buildCompletable Build a use case with the provided execution thread and post execution thread fun buildCompletable(params: P): Completable createInteractor Create a Completable for this interactor. abstract fun createInteractor(params: P): Completable","title":"Index"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/#completableinteractor","text":"abstract class CompletableInteractor<P : InteractorParams> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"CompletableInteractor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/#constructors","text":"Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler)","title":"Constructors"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/#functions","text":"Name Summary buildCompletable Build a use case with the provided execution thread and post execution thread fun buildCompletable(params: P): Completable createInteractor Create a Completable for this interactor. abstract fun createInteractor(params: P): Completable","title":"Functions"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/-init-/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / CompletableInteractor / <init> <init> \u00b6 CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":" init "},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/-init-/#init","text":"CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/build-completable/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / CompletableInteractor / buildCompletable buildCompletable \u00b6 fun buildCompletable(params: P): Completable Build a use case with the provided execution thread and post execution thread","title":"Build completable"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/build-completable/#buildcompletable","text":"fun buildCompletable(params: P): Completable Build a use case with the provided execution thread and post execution thread","title":"buildCompletable"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/create-interactor/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / CompletableInteractor / createInteractor createInteractor \u00b6 protected abstract fun createInteractor(params: P): Completable Create a Completable for this interactor.","title":"Create interactor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-completable-interactor/create-interactor/#createinteractor","text":"protected abstract fun createInteractor(params: P): Completable Create a Completable for this interactor.","title":"createInteractor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / ObservableInteractor ObservableInteractor \u00b6 abstract class ObservableInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . Constructors \u00b6 Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Functions \u00b6 Name Summary buildObservable Build a use case with the provided execution thread and post execution thread fun buildObservable(params: P): Observable<T> createInteractor Create a Observable for this interactor. abstract fun createInteractor(params: P): Observable<T>","title":"Index"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/#observableinteractor","text":"abstract class ObservableInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"ObservableInteractor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/#constructors","text":"Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler)","title":"Constructors"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/#functions","text":"Name Summary buildObservable Build a use case with the provided execution thread and post execution thread fun buildObservable(params: P): Observable<T> createInteractor Create a Observable for this interactor. abstract fun createInteractor(params: P): Observable<T>","title":"Functions"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/-init-/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / ObservableInteractor / <init> <init> \u00b6 ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":" init "},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/-init-/#init","text":"ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/build-observable/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / ObservableInteractor / buildObservable buildObservable \u00b6 fun buildObservable(params: P): Observable<T> Build a use case with the provided execution thread and post execution thread","title":"Build observable"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/build-observable/#buildobservable","text":"fun buildObservable(params: P): Observable<T> Build a use case with the provided execution thread and post execution thread","title":"buildObservable"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/create-interactor/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / ObservableInteractor / createInteractor createInteractor \u00b6 protected abstract fun createInteractor(params: P): Observable<T> Create a Observable for this interactor.","title":"Create interactor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-observable-interactor/create-interactor/#createinteractor","text":"protected abstract fun createInteractor(params: P): Observable<T> Create a Observable for this interactor.","title":"createInteractor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / SingleInteractor SingleInteractor \u00b6 abstract class SingleInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . Constructors \u00b6 Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Functions \u00b6 Name Summary buildSingle Build a use case with the provided execution thread and post execution thread fun buildSingle(params: P, blocking: Boolean = false): Single<T> createInteractor Create a Single for this interactor. abstract fun createInteractor(params: P): Single<T>","title":"Index"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/#singleinteractor","text":"abstract class SingleInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"SingleInteractor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/#constructors","text":"Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler)","title":"Constructors"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/#functions","text":"Name Summary buildSingle Build a use case with the provided execution thread and post execution thread fun buildSingle(params: P, blocking: Boolean = false): Single<T> createInteractor Create a Single for this interactor. abstract fun createInteractor(params: P): Single<T>","title":"Functions"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/-init-/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / SingleInteractor / <init> <init> \u00b6 SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":" init "},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/-init-/#init","text":"SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/build-single/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / SingleInteractor / buildSingle buildSingle \u00b6 fun buildSingle(params: P, blocking: Boolean = false): Single<T> Build a use case with the provided execution thread and post execution thread Parameters \u00b6 params - * parameters required for this interactor blocking - * when set to true the single will be subscribed and observed on the current thread","title":"Build single"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/build-single/#buildsingle","text":"fun buildSingle(params: P, blocking: Boolean = false): Single<T> Build a use case with the provided execution thread and post execution thread","title":"buildSingle"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/build-single/#parameters","text":"params - * parameters required for this interactor blocking - * when set to true the single will be subscribed and observed on the current thread","title":"Parameters"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/create-interactor/","text":"blueprint-interactor-rx2 / reactivecircus.blueprint.interactor.rx2 / SingleInteractor / createInteractor createInteractor \u00b6 protected abstract fun createInteractor(params: P): Single<T> Create a Single for this interactor.","title":"Create interactor"},{"location":"api/blueprint-interactor-rx2/reactivecircus.blueprint.interactor.rx2/-single-interactor/create-interactor/#createinteractor","text":"protected abstract fun createInteractor(params: P): Single<T> Create a Single for this interactor.","title":"createInteractor"},{"location":"api/blueprint-interactor-rx3/","text":"blueprint-interactor-rx3 Packages \u00b6 Name Summary reactivecircus.blueprint.interactor.rx3 Index \u00b6 All Types","title":"blueprint-interactor-rx3"},{"location":"api/blueprint-interactor-rx3/#packages","text":"Name Summary reactivecircus.blueprint.interactor.rx3","title":"Packages"},{"location":"api/blueprint-interactor-rx3/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-interactor-rx3/alltypes/","text":"All Types \u00b6 Name Summary reactivecircus.blueprint.interactor.rx3.CompletableInteractor \u00b6 Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . | reactivecircus.blueprint.interactor.rx3.ObservableInteractor \u00b6 Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . | reactivecircus.blueprint.interactor.rx3.SingleInteractor \u00b6 Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"Index"},{"location":"api/blueprint-interactor-rx3/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/blueprint-interactor-rx3/alltypes/#reactivecircusblueprintinteractorrx3completableinteractor","text":"Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . |","title":"reactivecircus.blueprint.interactor.rx3.CompletableInteractor"},{"location":"api/blueprint-interactor-rx3/alltypes/#reactivecircusblueprintinteractorrx3observableinteractor","text":"Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . |","title":"reactivecircus.blueprint.interactor.rx3.ObservableInteractor"},{"location":"api/blueprint-interactor-rx3/alltypes/#reactivecircusblueprintinteractorrx3singleinteractor","text":"Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"reactivecircus.blueprint.interactor.rx3.SingleInteractor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 Package reactivecircus.blueprint.interactor.rx3 \u00b6 Types \u00b6 Name Summary CompletableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class CompletableInteractor<P : InteractorParams> ObservableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class ObservableInteractor<P : InteractorParams, T> SingleInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class SingleInteractor<P : InteractorParams, T>","title":"Index"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/#package-reactivecircusblueprintinteractorrx3","text":"","title":"Package reactivecircus.blueprint.interactor.rx3"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/#types","text":"Name Summary CompletableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class CompletableInteractor<P : InteractorParams> ObservableInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class ObservableInteractor<P : InteractorParams, T> SingleInteractor Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . abstract class SingleInteractor<P : InteractorParams, T>","title":"Types"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / CompletableInteractor CompletableInteractor \u00b6 abstract class CompletableInteractor<P : InteractorParams> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . Constructors \u00b6 Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Functions \u00b6 Name Summary buildCompletable Build a use case with the provided execution thread and post execution thread fun buildCompletable(params: P): Completable createInteractor Create a Completable for this interactor. abstract fun createInteractor(params: P): Completable","title":"Index"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/#completableinteractor","text":"abstract class CompletableInteractor<P : InteractorParams> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"CompletableInteractor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/#constructors","text":"Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler)","title":"Constructors"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/#functions","text":"Name Summary buildCompletable Build a use case with the provided execution thread and post execution thread fun buildCompletable(params: P): Completable createInteractor Create a Completable for this interactor. abstract fun createInteractor(params: P): Completable","title":"Functions"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/-init-/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / CompletableInteractor / <init> <init> \u00b6 CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":" init "},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/-init-/#init","text":"CompletableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Completable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/build-completable/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / CompletableInteractor / buildCompletable buildCompletable \u00b6 fun buildCompletable(params: P): Completable Build a use case with the provided execution thread and post execution thread","title":"Build completable"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/build-completable/#buildcompletable","text":"fun buildCompletable(params: P): Completable Build a use case with the provided execution thread and post execution thread","title":"buildCompletable"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/create-interactor/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / CompletableInteractor / createInteractor createInteractor \u00b6 protected abstract fun createInteractor(params: P): Completable Create a Completable for this interactor.","title":"Create interactor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-completable-interactor/create-interactor/#createinteractor","text":"protected abstract fun createInteractor(params: P): Completable Create a Completable for this interactor.","title":"createInteractor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / ObservableInteractor ObservableInteractor \u00b6 abstract class ObservableInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . Constructors \u00b6 Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Functions \u00b6 Name Summary buildObservable Build a use case with the provided execution thread and post execution thread fun buildObservable(params: P): Observable<T> createInteractor Create a Observable for this interactor. abstract fun createInteractor(params: P): Observable<T>","title":"Index"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/#observableinteractor","text":"abstract class ObservableInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"ObservableInteractor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/#constructors","text":"Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler)","title":"Constructors"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/#functions","text":"Name Summary buildObservable Build a use case with the provided execution thread and post execution thread fun buildObservable(params: P): Observable<T> createInteractor Create a Observable for this interactor. abstract fun createInteractor(params: P): Observable<T>","title":"Functions"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/-init-/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / ObservableInteractor / <init> <init> \u00b6 ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":" init "},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/-init-/#init","text":"ObservableInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Observable as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/build-observable/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / ObservableInteractor / buildObservable buildObservable \u00b6 fun buildObservable(params: P): Observable<T> Build a use case with the provided execution thread and post execution thread","title":"Build observable"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/build-observable/#buildobservable","text":"fun buildObservable(params: P): Observable<T> Build a use case with the provided execution thread and post execution thread","title":"buildObservable"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/create-interactor/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / ObservableInteractor / createInteractor createInteractor \u00b6 protected abstract fun createInteractor(params: P): Observable<T> Create a Observable for this interactor.","title":"Create interactor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-observable-interactor/create-interactor/#createinteractor","text":"protected abstract fun createInteractor(params: P): Observable<T> Create a Observable for this interactor.","title":"createInteractor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / SingleInteractor SingleInteractor \u00b6 abstract class SingleInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . Constructors \u00b6 Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Functions \u00b6 Name Summary buildSingle Build a use case with the provided execution thread and post execution thread fun buildSingle(params: P, blocking: Boolean = false): Single<T> createInteractor Create a Single for this interactor. abstract fun createInteractor(params: P): Single<T>","title":"Index"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/#singleinteractor","text":"abstract class SingleInteractor<P : InteractorParams, T> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"SingleInteractor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/#constructors","text":"Name Summary <init> Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler . SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler)","title":"Constructors"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/#functions","text":"Name Summary buildSingle Build a use case with the provided execution thread and post execution thread fun buildSingle(params: P, blocking: Boolean = false): Single<T> createInteractor Create a Single for this interactor. abstract fun createInteractor(params: P): Single<T>","title":"Functions"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/-init-/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / SingleInteractor / <init> <init> \u00b6 SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":" init "},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/-init-/#init","text":"SingleInteractor(ioScheduler: Scheduler, uiScheduler: Scheduler) Abstract class for a use case, representing an execution unit of asynchronous work. This use case type uses Single as the return type. Upon subscription a use case will execute its job in the thread specified by the ioScheduler . and will post the result to the thread specified by uiScheduler .","title":"&lt;init&gt;"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/build-single/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / SingleInteractor / buildSingle buildSingle \u00b6 fun buildSingle(params: P, blocking: Boolean = false): Single<T> Build a use case with the provided execution thread and post execution thread Parameters \u00b6 params - * parameters required for this interactor blocking - * when set to true the single will be subscribed and observed on the current thread","title":"Build single"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/build-single/#buildsingle","text":"fun buildSingle(params: P, blocking: Boolean = false): Single<T> Build a use case with the provided execution thread and post execution thread","title":"buildSingle"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/build-single/#parameters","text":"params - * parameters required for this interactor blocking - * when set to true the single will be subscribed and observed on the current thread","title":"Parameters"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/create-interactor/","text":"blueprint-interactor-rx3 / reactivecircus.blueprint.interactor.rx3 / SingleInteractor / createInteractor createInteractor \u00b6 protected abstract fun createInteractor(params: P): Single<T> Create a Single for this interactor.","title":"Create interactor"},{"location":"api/blueprint-interactor-rx3/reactivecircus.blueprint.interactor.rx3/-single-interactor/create-interactor/#createinteractor","text":"protected abstract fun createInteractor(params: P): Single<T> Create a Single for this interactor.","title":"createInteractor"},{"location":"api/blueprint-testing-robot/","text":"blueprint-testing-robot Packages \u00b6 Name Summary reactivecircus.blueprint.testing reactivecircus.blueprint.testing.action reactivecircus.blueprint.testing.assertion reactivecircus.blueprint.testing.matcher Index \u00b6 All Types","title":"blueprint-testing-robot"},{"location":"api/blueprint-testing-robot/#packages","text":"Name Summary reactivecircus.blueprint.testing reactivecircus.blueprint.testing.action reactivecircus.blueprint.testing.assertion reactivecircus.blueprint.testing.matcher","title":"Packages"},{"location":"api/blueprint-testing-robot/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-testing-robot/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.blueprint.testing) kotlin.Any \u00b6 | reactivecircus.blueprint.testing.matcher.RecyclerViewMatcher \u00b6 | reactivecircus.blueprint.testing.RepeatRule \u00b6 TestRule to execute tests multiple times. This can be used to debug flaky tests. | reactivecircus.blueprint.testing.RobotActions \u00b6 Robot actions for performing common view actions. | reactivecircus.blueprint.testing.RobotAssertions \u00b6 Robot assertions for performing common view assertions. | reactivecircus.blueprint.testing.ScreenRobot \u00b6 Base class for implementing a robot DSL.","title":"Index"},{"location":"api/blueprint-testing-robot/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.blueprint.testing)","title":"All Types"},{"location":"api/blueprint-testing-robot/alltypes/#kotlinany","text":"|","title":"kotlin.Any"},{"location":"api/blueprint-testing-robot/alltypes/#reactivecircusblueprinttestingmatcherrecyclerviewmatcher","text":"|","title":"reactivecircus.blueprint.testing.matcher.RecyclerViewMatcher"},{"location":"api/blueprint-testing-robot/alltypes/#reactivecircusblueprinttestingrepeatrule","text":"TestRule to execute tests multiple times. This can be used to debug flaky tests. |","title":"reactivecircus.blueprint.testing.RepeatRule"},{"location":"api/blueprint-testing-robot/alltypes/#reactivecircusblueprinttestingrobotactions","text":"Robot actions for performing common view actions. |","title":"reactivecircus.blueprint.testing.RobotActions"},{"location":"api/blueprint-testing-robot/alltypes/#reactivecircusblueprinttestingrobotassertions","text":"Robot assertions for performing common view assertions. |","title":"reactivecircus.blueprint.testing.RobotAssertions"},{"location":"api/blueprint-testing-robot/alltypes/#reactivecircusblueprinttestingscreenrobot","text":"Base class for implementing a robot DSL.","title":"reactivecircus.blueprint.testing.ScreenRobot"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing Package reactivecircus.blueprint.testing \u00b6 Types \u00b6 Name Summary RepeatRule TestRule to execute tests multiple times. This can be used to debug flaky tests. class RepeatRule : TestRule RobotActions Robot actions for performing common view actions. interface RobotActions RobotAssertions Robot assertions for performing common view assertions. interface RobotAssertions ScreenRobot Base class for implementing a robot DSL. abstract class ScreenRobot<out A : RobotActions , out S : RobotAssertions > Extensions for External Classes \u00b6 Name Summary kotlin.Any Functions \u00b6 Name Summary clearToolbarScrollFlags Clear the scrollFlags on the Toolbar associated with toolbarId . fun clearToolbarScrollFlags(toolbarId: Int ): Unit currentActivity Finds the activity in the foreground (if any). fun currentActivity(): Activity ? onRecyclerViewIdle Wait until the RecyclerView has no more pending updates. fun onRecyclerViewIdle(recyclerViewId: Int ): Unit scrollTo Scroll until the view associated with viewId is visible. fun scrollTo(viewId: Int ): Unit Scroll until the text ] is visible. fun scrollTo(text: String ): Unit scrollToItemInRecyclerView Scroll to the item at itemIndex in the RecyclerView associated with recyclerViewId . fun scrollToItemInRecyclerView(recyclerViewId: Int , itemIndex: Int ): Unit","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/#package-reactivecircusblueprinttesting","text":"","title":"Package reactivecircus.blueprint.testing"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/#types","text":"Name Summary RepeatRule TestRule to execute tests multiple times. This can be used to debug flaky tests. class RepeatRule : TestRule RobotActions Robot actions for performing common view actions. interface RobotActions RobotAssertions Robot assertions for performing common view assertions. interface RobotAssertions ScreenRobot Base class for implementing a robot DSL. abstract class ScreenRobot<out A : RobotActions , out S : RobotAssertions >","title":"Types"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/#extensions-for-external-classes","text":"Name Summary kotlin.Any","title":"Extensions for External Classes"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/#functions","text":"Name Summary clearToolbarScrollFlags Clear the scrollFlags on the Toolbar associated with toolbarId . fun clearToolbarScrollFlags(toolbarId: Int ): Unit currentActivity Finds the activity in the foreground (if any). fun currentActivity(): Activity ? onRecyclerViewIdle Wait until the RecyclerView has no more pending updates. fun onRecyclerViewIdle(recyclerViewId: Int ): Unit scrollTo Scroll until the view associated with viewId is visible. fun scrollTo(viewId: Int ): Unit Scroll until the text ] is visible. fun scrollTo(text: String ): Unit scrollToItemInRecyclerView Scroll to the item at itemIndex in the RecyclerView associated with recyclerViewId . fun scrollToItemInRecyclerView(recyclerViewId: Int , itemIndex: Int ): Unit","title":"Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-robot-actions/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / RobotActions RobotActions \u00b6 interface RobotActions Robot actions for performing common view actions. Extension Functions \u00b6 Name Summary clearTextInView Clear the text in the edit text associated with viewId . fun RobotActions .clearTextInView(viewId: Int ): Unit clickNavigateUpButton Click the navigation up button in the current toolbar. fun RobotActions .clickNavigateUpButton(): Unit clickRadioButton Click on the radio button with buttonText within the radio group associated with radioGroupId . fun RobotActions .clickRadioButton(radioGroupId: Int , buttonText: String ): Unit clickRecyclerViewItem Click on the item at position within the recycler view associated with recyclerViewId . fun RobotActions .clickRecyclerViewItem(recyclerViewId: Int , position: Int ): Unit clickSnackbarActionButton Click the action button on the currently displayed Snackbar. fun RobotActions .clickSnackbarActionButton(): Unit clickTextInputLayoutEndIcon Click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutEndIcon(viewId: Int ): Unit clickTextInputLayoutErrorIcon Click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutErrorIcon(viewId: Int ): Unit clickTextInputLayoutStartIcon Click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutStartIcon(viewId: Int ): Unit clickView Click on the view associated with viewId . fun RobotActions .clickView(viewId: Int ): Unit closeDrawer Close the drawer associated with drawerId . fun RobotActions .closeDrawer(drawerId: Int ): Unit closeKeyboard Close the soft keyboard. fun RobotActions .closeKeyboard(viewId: Int ): Unit enterTextIntoView Enter text into the edit text associated with viewId . fun RobotActions .enterTextIntoView(viewId: Int , text: String ): Unit hideTextInputPasswordToggleButton Hide the password toggle button in the TextInputLayout associated with viewId . fun RobotActions .hideTextInputPasswordToggleButton(viewId: Int ): Unit interceptIntents Intercept the future intent and respond with Activity.RESULT_OK . fun RobotActions .interceptIntents(): Unit longClickTextInputLayoutEndIcon Long click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutEndIcon(viewId: Int ): Unit longClickTextInputLayoutErrorIcon Long click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutErrorIcon(viewId: Int ): Unit longClickTextInputLayoutStartIcon Long click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutStartIcon(viewId: Int ): Unit longClickView Long-click on the view associated with viewId . fun RobotActions .longClickView(viewId: Int ): Unit openDrawer Open the drawer associated with drawerId . fun RobotActions .openDrawer(drawerId: Int ): Unit pressBack Press the Android back button. fun RobotActions .pressBack(): Unit pressKeyboardActionButton Press the action button on the keyboard. fun RobotActions .pressKeyboardActionButton(viewId: Int ): Unit replaceTextInView Replace the text in the edit text associated with viewId with text . fun RobotActions .replaceTextInView(viewId: Int , text: String ): Unit selectBottomNavigationItem Select the bottom navigation item with navItemTitle from the bottom navigation view associated with bottomNavigationViewResId . fun RobotActions .selectBottomNavigationItem(bottomNavigationViewResId: Int , navItemTitle: String ): Unit selectCheckBox Select the checkbox with text within the view group associated with layoutId . fun RobotActions .selectCheckBox(layoutId: Int , text: String ): Unit selectNavigationItem Select the navigation item associated with menuItemResId from the navigation view associated with navigationViewResId . fun RobotActions .selectNavigationItem(navigationViewResId: Int , menuItemResId: Int ): Unit","title":" robot actions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-robot-actions/#robotactions","text":"interface RobotActions Robot actions for performing common view actions.","title":"RobotActions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-robot-actions/#extension-functions","text":"Name Summary clearTextInView Clear the text in the edit text associated with viewId . fun RobotActions .clearTextInView(viewId: Int ): Unit clickNavigateUpButton Click the navigation up button in the current toolbar. fun RobotActions .clickNavigateUpButton(): Unit clickRadioButton Click on the radio button with buttonText within the radio group associated with radioGroupId . fun RobotActions .clickRadioButton(radioGroupId: Int , buttonText: String ): Unit clickRecyclerViewItem Click on the item at position within the recycler view associated with recyclerViewId . fun RobotActions .clickRecyclerViewItem(recyclerViewId: Int , position: Int ): Unit clickSnackbarActionButton Click the action button on the currently displayed Snackbar. fun RobotActions .clickSnackbarActionButton(): Unit clickTextInputLayoutEndIcon Click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutEndIcon(viewId: Int ): Unit clickTextInputLayoutErrorIcon Click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutErrorIcon(viewId: Int ): Unit clickTextInputLayoutStartIcon Click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutStartIcon(viewId: Int ): Unit clickView Click on the view associated with viewId . fun RobotActions .clickView(viewId: Int ): Unit closeDrawer Close the drawer associated with drawerId . fun RobotActions .closeDrawer(drawerId: Int ): Unit closeKeyboard Close the soft keyboard. fun RobotActions .closeKeyboard(viewId: Int ): Unit enterTextIntoView Enter text into the edit text associated with viewId . fun RobotActions .enterTextIntoView(viewId: Int , text: String ): Unit hideTextInputPasswordToggleButton Hide the password toggle button in the TextInputLayout associated with viewId . fun RobotActions .hideTextInputPasswordToggleButton(viewId: Int ): Unit interceptIntents Intercept the future intent and respond with Activity.RESULT_OK . fun RobotActions .interceptIntents(): Unit longClickTextInputLayoutEndIcon Long click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutEndIcon(viewId: Int ): Unit longClickTextInputLayoutErrorIcon Long click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutErrorIcon(viewId: Int ): Unit longClickTextInputLayoutStartIcon Long click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutStartIcon(viewId: Int ): Unit longClickView Long-click on the view associated with viewId . fun RobotActions .longClickView(viewId: Int ): Unit openDrawer Open the drawer associated with drawerId . fun RobotActions .openDrawer(drawerId: Int ): Unit pressBack Press the Android back button. fun RobotActions .pressBack(): Unit pressKeyboardActionButton Press the action button on the keyboard. fun RobotActions .pressKeyboardActionButton(viewId: Int ): Unit replaceTextInView Replace the text in the edit text associated with viewId with text . fun RobotActions .replaceTextInView(viewId: Int , text: String ): Unit selectBottomNavigationItem Select the bottom navigation item with navItemTitle from the bottom navigation view associated with bottomNavigationViewResId . fun RobotActions .selectBottomNavigationItem(bottomNavigationViewResId: Int , navItemTitle: String ): Unit selectCheckBox Select the checkbox with text within the view group associated with layoutId . fun RobotActions .selectCheckBox(layoutId: Int , text: String ): Unit selectNavigationItem Select the navigation item associated with menuItemResId from the navigation view associated with navigationViewResId . fun RobotActions .selectNavigationItem(navigationViewResId: Int , menuItemResId: Int ): Unit","title":"Extension Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-robot-assertions/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / RobotAssertions RobotAssertions \u00b6 interface RobotAssertions Robot assertions for performing common view assertions. Extension Functions \u00b6 Name Summary activityLaunched Check if the activity of type A has been launched. fun <A : Activity > RobotAssertions .activityLaunched(): Unit backgroundDrawableDisplayed Check if the background drawable associated with resourceId is displayed. fun RobotAssertions .backgroundDrawableDisplayed(resourceId: Int ): Unit bottomNavigationViewItemSelected Check if the bottom navigation view associated with bottomNavigationViewResId has selectedItemResId as the selected item. fun RobotAssertions .bottomNavigationViewItemSelected(bottomNavigationViewResId: Int , selectedItemResId: Int ): Unit dialogWithButton1Displayed Check if a dialog with buttonTextResId as the button 1 label is displayed. fun RobotAssertions .dialogWithButton1Displayed(buttonTextResId: Int ): Unit dialogWithButton2Displayed Check if a dialog with buttonTextResId as the button 2 label is displayed. fun RobotAssertions .dialogWithButton2Displayed(buttonTextResId: Int ): Unit dialogWithButton3Displayed Check if a dialog with buttonTextResId as the button 3 label is displayed. fun RobotAssertions .dialogWithButton3Displayed(buttonTextResId: Int ): Unit dialogWithTextDisplayed Check if a dialog with the title of a string associated with titleResId is displayed. fun RobotAssertions .dialogWithTextDisplayed(titleResId: Int ): Unit Check if a dialog with the title expected is displayed. fun RobotAssertions .dialogWithTextDisplayed(expected: String ): Unit drawableDisplayed Check if the drawable associated with resourceId is displayed. fun RobotAssertions .drawableDisplayed(resourceId: Int ): Unit drawerClosed Check if the drawer associated with drawerId is closed. fun RobotAssertions .drawerClosed(drawerId: Int ): Unit drawerOpened Check if the drawer associated with drawerId is opened. fun RobotAssertions .drawerOpened(drawerId: Int ): Unit foregroundDrawableDisplayed Check if the foreground drawable associated with resourceId is displayed. fun RobotAssertions .foregroundDrawableDisplayed(resourceId: Int ): Unit fragmentDisplayed Check if the fragment of type F with tag is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(tag: String ): Unit Check if the fragment of type F with a navigation host associated with navHostViewId is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(navHostViewId: Int ): Unit keyboardInputTypeIsEmail Check if the edit text associated with viewId has an email input type. fun RobotAssertions .keyboardInputTypeIsEmail(viewId: Int ): Unit noActivityDisplayed Check if no activity is currently displayed fun RobotAssertions .noActivityDisplayed(): Unit radioButtonSelected Check if the radio group associated with radioGroupId has the button with buttonText selected. fun RobotAssertions .radioButtonSelected(radioGroupId: Int , buttonText: String ): Unit radioGroupHasNoSelections Check if the radio group associated with radioGroupId has NO selection. fun RobotAssertions .radioGroupHasNoSelections(radioGroupId: Int ): Unit radioGroupHasSelections Check if the radio group associated with radioGroupId has some selections. fun RobotAssertions .radioGroupHasSelections(radioGroupId: Int ): Unit radioGroupHasText Check if the radio group associated with radioGroupId has buttonTexts as the labels of the radio buttons. fun RobotAssertions .radioGroupHasText(radioGroupId: Int , vararg buttonTexts: String ): Unit recyclerViewHasSize Check if the recycler view associated with recyclerViewId has the size of size . fun RobotAssertions .recyclerViewHasSize(recyclerViewId: Int , size: Int ): Unit snackBarDisplayed Check if a snackbar with text as message is displayed. fun RobotAssertions .snackBarDisplayed(text: String ): Unit textDisplayed Check if all texts associated with textResIds are displayed. fun RobotAssertions .textDisplayed(vararg textResIds: Int ): Unit Check if all texts are displayed. fun RobotAssertions .textDisplayed(vararg texts: String ): Unit textInputLayoutHasError Check if text input layout associated with viewId has errorMessage as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessage: String ): Unit Check if text input layout associated with viewId has string associated with errorMessageResId as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessageResId: Int ): Unit textInputLayoutHasNoError Check if the text input layout associated with viewId has NO error. fun RobotAssertions .textInputLayoutHasNoError(viewId: Int ): Unit textNotDisplayed Check if no views associated with textResIds is displayed. fun RobotAssertions .textNotDisplayed(vararg textResIds: Int ): Unit Check if none of texts is displayed. fun RobotAssertions .textNotDisplayed(vararg texts: String ): Unit toolbarHasSubtitle Check if the current Toolbar has a subtitle of subtitle . fun RobotAssertions .toolbarHasSubtitle(subtitle: String ): Unit Check if the current Toolbar has a subtitle of a string associated with subtitleTextResId . fun RobotAssertions .toolbarHasSubtitle(subtitleTextResId: Int ): Unit toolbarHasTitle Check if the current Toolbar has a title of title . fun RobotAssertions .toolbarHasTitle(title: String ): Unit Check if the current Toolbar has a title of a string associated with titleTextResId . fun RobotAssertions .toolbarHasTitle(titleTextResId: Int ): Unit viewChecked Check if the checkable view associated with viewId is checked. fun RobotAssertions .viewChecked(viewId: Int ): Unit viewClickable Check if the view associated with viewId is clickable. fun RobotAssertions .viewClickable(viewId: Int ): Unit viewContainsText Check if the view associated with viewId has text that contains the expected string. fun RobotAssertions .viewContainsText(viewId: Int , expected: String ): Unit viewDisabled Check if the view associated with viewId is disabled. fun RobotAssertions .viewDisabled(viewId: Int ): Unit viewDisplayed Check if all views associated with viewIds are displayed. fun RobotAssertions .viewDisplayed(vararg viewIds: Int ): Unit viewEnabled Check if the view associated with viewId is enabled. fun RobotAssertions .viewEnabled(viewId: Int ): Unit viewEndsWithText Check if the view associated with viewId has text that ends with the expected string. fun RobotAssertions .viewEndsWithText(viewId: Int , expected: String ): Unit viewHasHint Check if the view associated with viewId has a hint that equals to the string associated with messageResId . fun RobotAssertions .viewHasHint(viewId: Int , messageResId: Int ): Unit viewHasText Check if the view associated with viewId has expected text. fun RobotAssertions .viewHasText(viewId: Int , expected: String ): Unit Check if the view associated with viewId has string associated with messageResId text. fun RobotAssertions .viewHasText(viewId: Int , messageResId: Int ): Unit viewNotChecked Check if the checkable view associated with viewId is NOT checked. fun RobotAssertions .viewNotChecked(viewId: Int ): Unit viewNotClickable Check if the view associated with viewId is NOT clickable. fun RobotAssertions .viewNotClickable(viewId: Int ): Unit viewNotDisplayed Check if all views associated with viewIds are NOT displayed. fun RobotAssertions .viewNotDisplayed(vararg viewIds: Int ): Unit viewStartsWithText Check if the view associated with viewId has text that starts with the expected string. fun RobotAssertions .viewStartsWithText(viewId: Int , expected: String ): Unit","title":" robot assertions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-robot-assertions/#robotassertions","text":"interface RobotAssertions Robot assertions for performing common view assertions.","title":"RobotAssertions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-robot-assertions/#extension-functions","text":"Name Summary activityLaunched Check if the activity of type A has been launched. fun <A : Activity > RobotAssertions .activityLaunched(): Unit backgroundDrawableDisplayed Check if the background drawable associated with resourceId is displayed. fun RobotAssertions .backgroundDrawableDisplayed(resourceId: Int ): Unit bottomNavigationViewItemSelected Check if the bottom navigation view associated with bottomNavigationViewResId has selectedItemResId as the selected item. fun RobotAssertions .bottomNavigationViewItemSelected(bottomNavigationViewResId: Int , selectedItemResId: Int ): Unit dialogWithButton1Displayed Check if a dialog with buttonTextResId as the button 1 label is displayed. fun RobotAssertions .dialogWithButton1Displayed(buttonTextResId: Int ): Unit dialogWithButton2Displayed Check if a dialog with buttonTextResId as the button 2 label is displayed. fun RobotAssertions .dialogWithButton2Displayed(buttonTextResId: Int ): Unit dialogWithButton3Displayed Check if a dialog with buttonTextResId as the button 3 label is displayed. fun RobotAssertions .dialogWithButton3Displayed(buttonTextResId: Int ): Unit dialogWithTextDisplayed Check if a dialog with the title of a string associated with titleResId is displayed. fun RobotAssertions .dialogWithTextDisplayed(titleResId: Int ): Unit Check if a dialog with the title expected is displayed. fun RobotAssertions .dialogWithTextDisplayed(expected: String ): Unit drawableDisplayed Check if the drawable associated with resourceId is displayed. fun RobotAssertions .drawableDisplayed(resourceId: Int ): Unit drawerClosed Check if the drawer associated with drawerId is closed. fun RobotAssertions .drawerClosed(drawerId: Int ): Unit drawerOpened Check if the drawer associated with drawerId is opened. fun RobotAssertions .drawerOpened(drawerId: Int ): Unit foregroundDrawableDisplayed Check if the foreground drawable associated with resourceId is displayed. fun RobotAssertions .foregroundDrawableDisplayed(resourceId: Int ): Unit fragmentDisplayed Check if the fragment of type F with tag is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(tag: String ): Unit Check if the fragment of type F with a navigation host associated with navHostViewId is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(navHostViewId: Int ): Unit keyboardInputTypeIsEmail Check if the edit text associated with viewId has an email input type. fun RobotAssertions .keyboardInputTypeIsEmail(viewId: Int ): Unit noActivityDisplayed Check if no activity is currently displayed fun RobotAssertions .noActivityDisplayed(): Unit radioButtonSelected Check if the radio group associated with radioGroupId has the button with buttonText selected. fun RobotAssertions .radioButtonSelected(radioGroupId: Int , buttonText: String ): Unit radioGroupHasNoSelections Check if the radio group associated with radioGroupId has NO selection. fun RobotAssertions .radioGroupHasNoSelections(radioGroupId: Int ): Unit radioGroupHasSelections Check if the radio group associated with radioGroupId has some selections. fun RobotAssertions .radioGroupHasSelections(radioGroupId: Int ): Unit radioGroupHasText Check if the radio group associated with radioGroupId has buttonTexts as the labels of the radio buttons. fun RobotAssertions .radioGroupHasText(radioGroupId: Int , vararg buttonTexts: String ): Unit recyclerViewHasSize Check if the recycler view associated with recyclerViewId has the size of size . fun RobotAssertions .recyclerViewHasSize(recyclerViewId: Int , size: Int ): Unit snackBarDisplayed Check if a snackbar with text as message is displayed. fun RobotAssertions .snackBarDisplayed(text: String ): Unit textDisplayed Check if all texts associated with textResIds are displayed. fun RobotAssertions .textDisplayed(vararg textResIds: Int ): Unit Check if all texts are displayed. fun RobotAssertions .textDisplayed(vararg texts: String ): Unit textInputLayoutHasError Check if text input layout associated with viewId has errorMessage as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessage: String ): Unit Check if text input layout associated with viewId has string associated with errorMessageResId as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessageResId: Int ): Unit textInputLayoutHasNoError Check if the text input layout associated with viewId has NO error. fun RobotAssertions .textInputLayoutHasNoError(viewId: Int ): Unit textNotDisplayed Check if no views associated with textResIds is displayed. fun RobotAssertions .textNotDisplayed(vararg textResIds: Int ): Unit Check if none of texts is displayed. fun RobotAssertions .textNotDisplayed(vararg texts: String ): Unit toolbarHasSubtitle Check if the current Toolbar has a subtitle of subtitle . fun RobotAssertions .toolbarHasSubtitle(subtitle: String ): Unit Check if the current Toolbar has a subtitle of a string associated with subtitleTextResId . fun RobotAssertions .toolbarHasSubtitle(subtitleTextResId: Int ): Unit toolbarHasTitle Check if the current Toolbar has a title of title . fun RobotAssertions .toolbarHasTitle(title: String ): Unit Check if the current Toolbar has a title of a string associated with titleTextResId . fun RobotAssertions .toolbarHasTitle(titleTextResId: Int ): Unit viewChecked Check if the checkable view associated with viewId is checked. fun RobotAssertions .viewChecked(viewId: Int ): Unit viewClickable Check if the view associated with viewId is clickable. fun RobotAssertions .viewClickable(viewId: Int ): Unit viewContainsText Check if the view associated with viewId has text that contains the expected string. fun RobotAssertions .viewContainsText(viewId: Int , expected: String ): Unit viewDisabled Check if the view associated with viewId is disabled. fun RobotAssertions .viewDisabled(viewId: Int ): Unit viewDisplayed Check if all views associated with viewIds are displayed. fun RobotAssertions .viewDisplayed(vararg viewIds: Int ): Unit viewEnabled Check if the view associated with viewId is enabled. fun RobotAssertions .viewEnabled(viewId: Int ): Unit viewEndsWithText Check if the view associated with viewId has text that ends with the expected string. fun RobotAssertions .viewEndsWithText(viewId: Int , expected: String ): Unit viewHasHint Check if the view associated with viewId has a hint that equals to the string associated with messageResId . fun RobotAssertions .viewHasHint(viewId: Int , messageResId: Int ): Unit viewHasText Check if the view associated with viewId has expected text. fun RobotAssertions .viewHasText(viewId: Int , expected: String ): Unit Check if the view associated with viewId has string associated with messageResId text. fun RobotAssertions .viewHasText(viewId: Int , messageResId: Int ): Unit viewNotChecked Check if the checkable view associated with viewId is NOT checked. fun RobotAssertions .viewNotChecked(viewId: Int ): Unit viewNotClickable Check if the view associated with viewId is NOT clickable. fun RobotAssertions .viewNotClickable(viewId: Int ): Unit viewNotDisplayed Check if all views associated with viewIds are NOT displayed. fun RobotAssertions .viewNotDisplayed(vararg viewIds: Int ): Unit viewStartsWithText Check if the view associated with viewId has text that starts with the expected string. fun RobotAssertions .viewStartsWithText(viewId: Int , expected: String ): Unit","title":"Extension Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/clear-toolbar-scroll-flags/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / clearToolbarScrollFlags clearToolbarScrollFlags \u00b6 fun clearToolbarScrollFlags(@IdRes toolbarId: Int ): Unit Clear the scrollFlags on the Toolbar associated with toolbarId .","title":"Clear toolbar scroll flags"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/clear-toolbar-scroll-flags/#cleartoolbarscrollflags","text":"fun clearToolbarScrollFlags(@IdRes toolbarId: Int ): Unit Clear the scrollFlags on the Toolbar associated with toolbarId .","title":"clearToolbarScrollFlags"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/current-activity/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / currentActivity currentActivity \u00b6 fun currentActivity(): Activity ? Finds the activity in the foreground (if any).","title":"Current activity"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/current-activity/#currentactivity","text":"fun currentActivity(): Activity ? Finds the activity in the foreground (if any).","title":"currentActivity"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/on-recycler-view-idle/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / onRecyclerViewIdle onRecyclerViewIdle \u00b6 fun onRecyclerViewIdle(@IdRes recyclerViewId: Int ): Unit Wait until the RecyclerView has no more pending updates.","title":"On recycler view idle"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/on-recycler-view-idle/#onrecyclerviewidle","text":"fun onRecyclerViewIdle(@IdRes recyclerViewId: Int ): Unit Wait until the RecyclerView has no more pending updates.","title":"onRecyclerViewIdle"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/scroll-to-item-in-recycler-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / scrollToItemInRecyclerView scrollToItemInRecyclerView \u00b6 fun scrollToItemInRecyclerView(@IdRes recyclerViewId: Int , itemIndex: Int ): Unit Scroll to the item at itemIndex in the RecyclerView associated with recyclerViewId .","title":"Scroll to item in recycler view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/scroll-to-item-in-recycler-view/#scrolltoiteminrecyclerview","text":"fun scrollToItemInRecyclerView(@IdRes recyclerViewId: Int , itemIndex: Int ): Unit Scroll to the item at itemIndex in the RecyclerView associated with recyclerViewId .","title":"scrollToItemInRecyclerView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/scroll-to/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / scrollTo scrollTo \u00b6 fun scrollTo(@IdRes viewId: Int ): Unit Scroll until the view associated with viewId is visible. fun scrollTo(text: String ): Unit Scroll until the text ] is visible.","title":"Scroll to"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/scroll-to/#scrollto","text":"fun scrollTo(@IdRes viewId: Int ): Unit Scroll until the view associated with viewId is visible. fun scrollTo(text: String ): Unit Scroll until the text ] is visible.","title":"scrollTo"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / RepeatRule RepeatRule \u00b6 class RepeatRule : TestRule TestRule to execute tests multiple times. This can be used to debug flaky tests. Constructors \u00b6 Name Summary <init> TestRule to execute tests multiple times. This can be used to debug flaky tests. RepeatRule(iterations: Int ) Functions \u00b6 Name Summary apply fun apply(base: Statement, description: Description): Statement","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/#repeatrule","text":"class RepeatRule : TestRule TestRule to execute tests multiple times. This can be used to debug flaky tests.","title":"RepeatRule"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/#constructors","text":"Name Summary <init> TestRule to execute tests multiple times. This can be used to debug flaky tests. RepeatRule(iterations: Int )","title":"Constructors"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/#functions","text":"Name Summary apply fun apply(base: Statement, description: Description): Statement","title":"Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/-init-/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / RepeatRule / <init> <init> \u00b6 RepeatRule(iterations: Int ) TestRule to execute tests multiple times. This can be used to debug flaky tests.","title":" init "},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/-init-/#init","text":"RepeatRule(iterations: Int ) TestRule to execute tests multiple times. This can be used to debug flaky tests.","title":"&lt;init&gt;"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/apply/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / RepeatRule / apply apply \u00b6 fun apply(base: Statement, description: Description): Statement","title":"Apply"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-repeat-rule/apply/#apply","text":"fun apply(base: Statement, description: Description): Statement","title":"apply"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / ScreenRobot ScreenRobot \u00b6 abstract class ScreenRobot<out A : RobotActions , out S : RobotAssertions > Base class for implementing a robot DSL. Constructors \u00b6 Name Summary <init> Base class for implementing a robot DSL. ScreenRobot(robotActions: A, robotAssertions: S) Functions \u00b6 Name Summary check fun check(block: S.() -> Unit ): S given fun given(block: () -> Unit ): Unit perform fun perform(block: A.() -> Unit ): A","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/#screenrobot","text":"abstract class ScreenRobot<out A : RobotActions , out S : RobotAssertions > Base class for implementing a robot DSL.","title":"ScreenRobot"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/#constructors","text":"Name Summary <init> Base class for implementing a robot DSL. ScreenRobot(robotActions: A, robotAssertions: S)","title":"Constructors"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/#functions","text":"Name Summary check fun check(block: S.() -> Unit ): S given fun given(block: () -> Unit ): Unit perform fun perform(block: A.() -> Unit ): A","title":"Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/-init-/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / ScreenRobot / <init> <init> \u00b6 ScreenRobot(robotActions: A, robotAssertions: S) Base class for implementing a robot DSL.","title":" init "},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/-init-/#init","text":"ScreenRobot(robotActions: A, robotAssertions: S) Base class for implementing a robot DSL.","title":"&lt;init&gt;"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/check/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / ScreenRobot / check check \u00b6 fun check(block: S.() -> Unit ): S","title":"Check"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/check/#check","text":"fun check(block: S.() -> Unit ): S","title":"check"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/given/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / ScreenRobot / given given \u00b6 fun given(block: () -> Unit ): Unit","title":"Given"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/given/#given","text":"fun given(block: () -> Unit ): Unit","title":"given"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/perform/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / ScreenRobot / perform perform \u00b6 fun perform(block: A.() -> Unit ): A","title":"Perform"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/-screen-robot/perform/#perform","text":"fun perform(block: A.() -> Unit ): A","title":"perform"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/kotlin.-any/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / kotlin.Any Extensions for kotlin.Any \u00b6 Name Summary asViewAction Convert anything to a ViewAction by looping the main thread for at least delayMillis . This is useful when the trigger of an action isn\u2019t a regular Espresso ViewAction e.g. some external events, but needs to participate in Espresso\u2019s internal synchronisation mechanisms to prevent the next ViewAction or Matcher from executing too early. fun Any .asViewAction(delayMillis: Long = DEFAULT_VIEW_ACTION_DELAY_MILLIS): Unit","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/kotlin.-any/#extensions-for-kotlinany","text":"Name Summary asViewAction Convert anything to a ViewAction by looping the main thread for at least delayMillis . This is useful when the trigger of an action isn\u2019t a regular Espresso ViewAction e.g. some external events, but needs to participate in Espresso\u2019s internal synchronisation mechanisms to prevent the next ViewAction or Matcher from executing too early. fun Any .asViewAction(delayMillis: Long = DEFAULT_VIEW_ACTION_DELAY_MILLIS): Unit","title":"Extensions for kotlin.Any"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/kotlin.-any/as-view-action/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing / kotlin.Any / asViewAction asViewAction \u00b6 fun Any .asViewAction(delayMillis: Long = DEFAULT_VIEW_ACTION_DELAY_MILLIS): Unit Convert anything to a ViewAction by looping the main thread for at least delayMillis . This is useful when the trigger of an action isn\u2019t a regular Espresso ViewAction e.g. some external events, but needs to participate in Espresso\u2019s internal synchronisation mechanisms to prevent the next ViewAction or Matcher from executing too early.","title":"As view action"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing/kotlin.-any/as-view-action/#asviewaction","text":"fun Any .asViewAction(delayMillis: Long = DEFAULT_VIEW_ACTION_DELAY_MILLIS): Unit Convert anything to a ViewAction by looping the main thread for at least delayMillis . This is useful when the trigger of an action isn\u2019t a regular Espresso ViewAction e.g. some external events, but needs to participate in Espresso\u2019s internal synchronisation mechanisms to prevent the next ViewAction or Matcher from executing too early.","title":"asViewAction"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action Package reactivecircus.blueprint.testing.action \u00b6 Functions \u00b6 Name Summary clearTextInView Clear the text in the edit text associated with viewId . fun RobotActions .clearTextInView(viewId: Int ): Unit clickDialogButton1 Click on button 1 of the currently displayed dialog. fun clickDialogButton1(): Unit clickDialogButton2 Click on button 2 of the currently displayed dialog. fun clickDialogButton2(): Unit clickDialogButton3 Click on button 3 of the currently displayed dialog. fun clickDialogButton3(): Unit clickNavigateUpButton Click the navigation up button in the current toolbar. fun RobotActions .clickNavigateUpButton(): Unit clickRadioButton Click on the radio button with buttonText within the radio group associated with radioGroupId . fun RobotActions .clickRadioButton(radioGroupId: Int , buttonText: String ): Unit clickRecyclerViewItem Click on the item at position within the recycler view associated with recyclerViewId . fun RobotActions .clickRecyclerViewItem(recyclerViewId: Int , position: Int ): Unit clickSnackbarActionButton Click the action button on the currently displayed Snackbar. fun RobotActions .clickSnackbarActionButton(): Unit clickTextInputLayoutEndIcon Click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutEndIcon(viewId: Int ): Unit clickTextInputLayoutErrorIcon Click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutErrorIcon(viewId: Int ): Unit clickTextInputLayoutStartIcon Click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutStartIcon(viewId: Int ): Unit clickView Click on the view associated with viewId . fun RobotActions .clickView(viewId: Int ): Unit closeDrawer Close the drawer associated with drawerId . fun RobotActions .closeDrawer(drawerId: Int ): Unit closeKeyboard Close the soft keyboard. fun RobotActions .closeKeyboard(viewId: Int ): Unit enterTextIntoView Enter text into the edit text associated with viewId . fun RobotActions .enterTextIntoView(viewId: Int , text: String ): Unit hideTextInputPasswordToggleButton Hide the password toggle button in the TextInputLayout associated with viewId . fun RobotActions .hideTextInputPasswordToggleButton(viewId: Int ): Unit interceptIntents Intercept the future intent and respond with Activity.RESULT_OK . fun RobotActions .interceptIntents(): Unit longClickTextInputLayoutEndIcon Long click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutEndIcon(viewId: Int ): Unit longClickTextInputLayoutErrorIcon Long click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutErrorIcon(viewId: Int ): Unit longClickTextInputLayoutStartIcon Long click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutStartIcon(viewId: Int ): Unit longClickView Long-click on the view associated with viewId . fun RobotActions .longClickView(viewId: Int ): Unit openDrawer Open the drawer associated with drawerId . fun RobotActions .openDrawer(drawerId: Int ): Unit pressBack Press the Android back button. fun RobotActions .pressBack(): Unit pressKeyboardActionButton Press the action button on the keyboard. fun RobotActions .pressKeyboardActionButton(viewId: Int ): Unit replaceTextInView Replace the text in the edit text associated with viewId with text . fun RobotActions .replaceTextInView(viewId: Int , text: String ): Unit selectBottomNavigationItem Select the bottom navigation item with navItemTitle from the bottom navigation view associated with bottomNavigationViewResId . fun RobotActions .selectBottomNavigationItem(bottomNavigationViewResId: Int , navItemTitle: String ): Unit selectCheckBox Select the checkbox with text within the view group associated with layoutId . fun RobotActions .selectCheckBox(layoutId: Int , text: String ): Unit selectNavigationItem Select the navigation item associated with menuItemResId from the navigation view associated with navigationViewResId . fun RobotActions .selectNavigationItem(navigationViewResId: Int , menuItemResId: Int ): Unit swipeDownOnView Swipe up down the view associated with viewId . fun swipeDownOnView(viewId: Int ): Unit swipeLeftOnView Swipe left on the view associated with viewId . fun swipeLeftOnView(viewId: Int ): Unit swipeRightOnView Swipe right on the view associated with viewId . fun swipeRightOnView(viewId: Int ): Unit swipeUpOnView Swipe up on the view associated with viewId . fun swipeUpOnView(viewId: Int ): Unit","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/#package-reactivecircusblueprinttestingaction","text":"","title":"Package reactivecircus.blueprint.testing.action"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/#functions","text":"Name Summary clearTextInView Clear the text in the edit text associated with viewId . fun RobotActions .clearTextInView(viewId: Int ): Unit clickDialogButton1 Click on button 1 of the currently displayed dialog. fun clickDialogButton1(): Unit clickDialogButton2 Click on button 2 of the currently displayed dialog. fun clickDialogButton2(): Unit clickDialogButton3 Click on button 3 of the currently displayed dialog. fun clickDialogButton3(): Unit clickNavigateUpButton Click the navigation up button in the current toolbar. fun RobotActions .clickNavigateUpButton(): Unit clickRadioButton Click on the radio button with buttonText within the radio group associated with radioGroupId . fun RobotActions .clickRadioButton(radioGroupId: Int , buttonText: String ): Unit clickRecyclerViewItem Click on the item at position within the recycler view associated with recyclerViewId . fun RobotActions .clickRecyclerViewItem(recyclerViewId: Int , position: Int ): Unit clickSnackbarActionButton Click the action button on the currently displayed Snackbar. fun RobotActions .clickSnackbarActionButton(): Unit clickTextInputLayoutEndIcon Click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutEndIcon(viewId: Int ): Unit clickTextInputLayoutErrorIcon Click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutErrorIcon(viewId: Int ): Unit clickTextInputLayoutStartIcon Click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .clickTextInputLayoutStartIcon(viewId: Int ): Unit clickView Click on the view associated with viewId . fun RobotActions .clickView(viewId: Int ): Unit closeDrawer Close the drawer associated with drawerId . fun RobotActions .closeDrawer(drawerId: Int ): Unit closeKeyboard Close the soft keyboard. fun RobotActions .closeKeyboard(viewId: Int ): Unit enterTextIntoView Enter text into the edit text associated with viewId . fun RobotActions .enterTextIntoView(viewId: Int , text: String ): Unit hideTextInputPasswordToggleButton Hide the password toggle button in the TextInputLayout associated with viewId . fun RobotActions .hideTextInputPasswordToggleButton(viewId: Int ): Unit interceptIntents Intercept the future intent and respond with Activity.RESULT_OK . fun RobotActions .interceptIntents(): Unit longClickTextInputLayoutEndIcon Long click on the end icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutEndIcon(viewId: Int ): Unit longClickTextInputLayoutErrorIcon Long click on the error icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutErrorIcon(viewId: Int ): Unit longClickTextInputLayoutStartIcon Long click on the start icon on the TextInputLayout associated with viewId . fun RobotActions .longClickTextInputLayoutStartIcon(viewId: Int ): Unit longClickView Long-click on the view associated with viewId . fun RobotActions .longClickView(viewId: Int ): Unit openDrawer Open the drawer associated with drawerId . fun RobotActions .openDrawer(drawerId: Int ): Unit pressBack Press the Android back button. fun RobotActions .pressBack(): Unit pressKeyboardActionButton Press the action button on the keyboard. fun RobotActions .pressKeyboardActionButton(viewId: Int ): Unit replaceTextInView Replace the text in the edit text associated with viewId with text . fun RobotActions .replaceTextInView(viewId: Int , text: String ): Unit selectBottomNavigationItem Select the bottom navigation item with navItemTitle from the bottom navigation view associated with bottomNavigationViewResId . fun RobotActions .selectBottomNavigationItem(bottomNavigationViewResId: Int , navItemTitle: String ): Unit selectCheckBox Select the checkbox with text within the view group associated with layoutId . fun RobotActions .selectCheckBox(layoutId: Int , text: String ): Unit selectNavigationItem Select the navigation item associated with menuItemResId from the navigation view associated with navigationViewResId . fun RobotActions .selectNavigationItem(navigationViewResId: Int , menuItemResId: Int ): Unit swipeDownOnView Swipe up down the view associated with viewId . fun swipeDownOnView(viewId: Int ): Unit swipeLeftOnView Swipe left on the view associated with viewId . fun swipeLeftOnView(viewId: Int ): Unit swipeRightOnView Swipe right on the view associated with viewId . fun swipeRightOnView(viewId: Int ): Unit swipeUpOnView Swipe up on the view associated with viewId . fun swipeUpOnView(viewId: Int ): Unit","title":"Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/clear-text-in-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clearTextInView clearTextInView \u00b6 fun RobotActions .clearTextInView(@IdRes viewId: Int ): Unit Clear the text in the edit text associated with viewId .","title":"Clear text in view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/clear-text-in-view/#cleartextinview","text":"fun RobotActions .clearTextInView(@IdRes viewId: Int ): Unit Clear the text in the edit text associated with viewId .","title":"clearTextInView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-dialog-button1/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickDialogButton1 clickDialogButton1 \u00b6 fun clickDialogButton1(): Unit Click on button 1 of the currently displayed dialog.","title":"Click dialog button1"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-dialog-button1/#clickdialogbutton1","text":"fun clickDialogButton1(): Unit Click on button 1 of the currently displayed dialog.","title":"clickDialogButton1"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-dialog-button2/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickDialogButton2 clickDialogButton2 \u00b6 fun clickDialogButton2(): Unit Click on button 2 of the currently displayed dialog.","title":"Click dialog button2"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-dialog-button2/#clickdialogbutton2","text":"fun clickDialogButton2(): Unit Click on button 2 of the currently displayed dialog.","title":"clickDialogButton2"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-dialog-button3/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickDialogButton3 clickDialogButton3 \u00b6 fun clickDialogButton3(): Unit Click on button 3 of the currently displayed dialog.","title":"Click dialog button3"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-dialog-button3/#clickdialogbutton3","text":"fun clickDialogButton3(): Unit Click on button 3 of the currently displayed dialog.","title":"clickDialogButton3"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-navigate-up-button/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickNavigateUpButton clickNavigateUpButton \u00b6 fun RobotActions .clickNavigateUpButton(): Unit Click the navigation up button in the current toolbar.","title":"Click navigate up button"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-navigate-up-button/#clicknavigateupbutton","text":"fun RobotActions .clickNavigateUpButton(): Unit Click the navigation up button in the current toolbar.","title":"clickNavigateUpButton"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-radio-button/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickRadioButton clickRadioButton \u00b6 fun RobotActions .clickRadioButton(@IdRes radioGroupId: Int , buttonText: String ): Unit Click on the radio button with buttonText within the radio group associated with radioGroupId .","title":"Click radio button"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-radio-button/#clickradiobutton","text":"fun RobotActions .clickRadioButton(@IdRes radioGroupId: Int , buttonText: String ): Unit Click on the radio button with buttonText within the radio group associated with radioGroupId .","title":"clickRadioButton"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-recycler-view-item/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickRecyclerViewItem clickRecyclerViewItem \u00b6 fun RobotActions .clickRecyclerViewItem(@IdRes recyclerViewId: Int , position: Int ): Unit Click on the item at position within the recycler view associated with recyclerViewId .","title":"Click recycler view item"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-recycler-view-item/#clickrecyclerviewitem","text":"fun RobotActions .clickRecyclerViewItem(@IdRes recyclerViewId: Int , position: Int ): Unit Click on the item at position within the recycler view associated with recyclerViewId .","title":"clickRecyclerViewItem"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-snackbar-action-button/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickSnackbarActionButton clickSnackbarActionButton \u00b6 fun RobotActions .clickSnackbarActionButton(): Unit Click the action button on the currently displayed Snackbar.","title":"Click snackbar action button"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-snackbar-action-button/#clicksnackbaractionbutton","text":"fun RobotActions .clickSnackbarActionButton(): Unit Click the action button on the currently displayed Snackbar.","title":"clickSnackbarActionButton"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-text-input-layout-end-icon/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickTextInputLayoutEndIcon clickTextInputLayoutEndIcon \u00b6 fun RobotActions .clickTextInputLayoutEndIcon(@IdRes viewId: Int ): Unit Click on the end icon on the TextInputLayout associated with viewId .","title":"Click text input layout end icon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-text-input-layout-end-icon/#clicktextinputlayoutendicon","text":"fun RobotActions .clickTextInputLayoutEndIcon(@IdRes viewId: Int ): Unit Click on the end icon on the TextInputLayout associated with viewId .","title":"clickTextInputLayoutEndIcon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-text-input-layout-error-icon/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickTextInputLayoutErrorIcon clickTextInputLayoutErrorIcon \u00b6 fun RobotActions .clickTextInputLayoutErrorIcon(@IdRes viewId: Int ): Unit Click on the error icon on the TextInputLayout associated with viewId .","title":"Click text input layout error icon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-text-input-layout-error-icon/#clicktextinputlayouterroricon","text":"fun RobotActions .clickTextInputLayoutErrorIcon(@IdRes viewId: Int ): Unit Click on the error icon on the TextInputLayout associated with viewId .","title":"clickTextInputLayoutErrorIcon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-text-input-layout-start-icon/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickTextInputLayoutStartIcon clickTextInputLayoutStartIcon \u00b6 fun RobotActions .clickTextInputLayoutStartIcon(@IdRes viewId: Int ): Unit Click on the start icon on the TextInputLayout associated with viewId .","title":"Click text input layout start icon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-text-input-layout-start-icon/#clicktextinputlayoutstarticon","text":"fun RobotActions .clickTextInputLayoutStartIcon(@IdRes viewId: Int ): Unit Click on the start icon on the TextInputLayout associated with viewId .","title":"clickTextInputLayoutStartIcon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / clickView clickView \u00b6 fun RobotActions .clickView(@IdRes viewId: Int ): Unit Click on the view associated with viewId .","title":"Click view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/click-view/#clickview","text":"fun RobotActions .clickView(@IdRes viewId: Int ): Unit Click on the view associated with viewId .","title":"clickView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/close-drawer/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / closeDrawer closeDrawer \u00b6 fun RobotActions .closeDrawer(@IdRes drawerId: Int ): Unit Close the drawer associated with drawerId .","title":"Close drawer"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/close-drawer/#closedrawer","text":"fun RobotActions .closeDrawer(@IdRes drawerId: Int ): Unit Close the drawer associated with drawerId .","title":"closeDrawer"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/close-keyboard/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / closeKeyboard closeKeyboard \u00b6 fun RobotActions .closeKeyboard(@IdRes viewId: Int ): Unit Close the soft keyboard.","title":"Close keyboard"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/close-keyboard/#closekeyboard","text":"fun RobotActions .closeKeyboard(@IdRes viewId: Int ): Unit Close the soft keyboard.","title":"closeKeyboard"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/enter-text-into-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / enterTextIntoView enterTextIntoView \u00b6 fun RobotActions .enterTextIntoView(@IdRes viewId: Int , text: String ): Unit Enter text into the edit text associated with viewId .","title":"Enter text into view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/enter-text-into-view/#entertextintoview","text":"fun RobotActions .enterTextIntoView(@IdRes viewId: Int , text: String ): Unit Enter text into the edit text associated with viewId .","title":"enterTextIntoView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/hide-text-input-password-toggle-button/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / hideTextInputPasswordToggleButton hideTextInputPasswordToggleButton \u00b6 fun RobotActions .hideTextInputPasswordToggleButton(@IdRes viewId: Int ): Unit Hide the password toggle button in the TextInputLayout associated with viewId .","title":"Hide text input password toggle button"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/hide-text-input-password-toggle-button/#hidetextinputpasswordtogglebutton","text":"fun RobotActions .hideTextInputPasswordToggleButton(@IdRes viewId: Int ): Unit Hide the password toggle button in the TextInputLayout associated with viewId .","title":"hideTextInputPasswordToggleButton"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/intercept-intents/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / interceptIntents interceptIntents \u00b6 fun RobotActions .interceptIntents(): Unit Intercept the future intent and respond with Activity.RESULT_OK .","title":"Intercept intents"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/intercept-intents/#interceptintents","text":"fun RobotActions .interceptIntents(): Unit Intercept the future intent and respond with Activity.RESULT_OK .","title":"interceptIntents"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-text-input-layout-end-icon/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / longClickTextInputLayoutEndIcon longClickTextInputLayoutEndIcon \u00b6 fun RobotActions .longClickTextInputLayoutEndIcon(@IdRes viewId: Int ): Unit Long click on the end icon on the TextInputLayout associated with viewId .","title":"Long click text input layout end icon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-text-input-layout-end-icon/#longclicktextinputlayoutendicon","text":"fun RobotActions .longClickTextInputLayoutEndIcon(@IdRes viewId: Int ): Unit Long click on the end icon on the TextInputLayout associated with viewId .","title":"longClickTextInputLayoutEndIcon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-text-input-layout-error-icon/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / longClickTextInputLayoutErrorIcon longClickTextInputLayoutErrorIcon \u00b6 fun RobotActions .longClickTextInputLayoutErrorIcon(@IdRes viewId: Int ): Unit Long click on the error icon on the TextInputLayout associated with viewId .","title":"Long click text input layout error icon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-text-input-layout-error-icon/#longclicktextinputlayouterroricon","text":"fun RobotActions .longClickTextInputLayoutErrorIcon(@IdRes viewId: Int ): Unit Long click on the error icon on the TextInputLayout associated with viewId .","title":"longClickTextInputLayoutErrorIcon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-text-input-layout-start-icon/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / longClickTextInputLayoutStartIcon longClickTextInputLayoutStartIcon \u00b6 fun RobotActions .longClickTextInputLayoutStartIcon(@IdRes viewId: Int ): Unit Long click on the start icon on the TextInputLayout associated with viewId .","title":"Long click text input layout start icon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-text-input-layout-start-icon/#longclicktextinputlayoutstarticon","text":"fun RobotActions .longClickTextInputLayoutStartIcon(@IdRes viewId: Int ): Unit Long click on the start icon on the TextInputLayout associated with viewId .","title":"longClickTextInputLayoutStartIcon"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / longClickView longClickView \u00b6 fun RobotActions .longClickView(@IdRes viewId: Int ): Unit Long-click on the view associated with viewId .","title":"Long click view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/long-click-view/#longclickview","text":"fun RobotActions .longClickView(@IdRes viewId: Int ): Unit Long-click on the view associated with viewId .","title":"longClickView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/open-drawer/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / openDrawer openDrawer \u00b6 fun RobotActions .openDrawer(@IdRes drawerId: Int ): Unit Open the drawer associated with drawerId .","title":"Open drawer"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/open-drawer/#opendrawer","text":"fun RobotActions .openDrawer(@IdRes drawerId: Int ): Unit Open the drawer associated with drawerId .","title":"openDrawer"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/press-back/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / pressBack pressBack \u00b6 fun RobotActions .pressBack(): Unit Press the Android back button.","title":"Press back"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/press-back/#pressback","text":"fun RobotActions .pressBack(): Unit Press the Android back button.","title":"pressBack"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/press-keyboard-action-button/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / pressKeyboardActionButton pressKeyboardActionButton \u00b6 fun RobotActions .pressKeyboardActionButton(@IdRes viewId: Int ): Unit Press the action button on the keyboard.","title":"Press keyboard action button"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/press-keyboard-action-button/#presskeyboardactionbutton","text":"fun RobotActions .pressKeyboardActionButton(@IdRes viewId: Int ): Unit Press the action button on the keyboard.","title":"pressKeyboardActionButton"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/replace-text-in-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / replaceTextInView replaceTextInView \u00b6 fun RobotActions .replaceTextInView(@IdRes viewId: Int , text: String ): Unit Replace the text in the edit text associated with viewId with text .","title":"Replace text in view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/replace-text-in-view/#replacetextinview","text":"fun RobotActions .replaceTextInView(@IdRes viewId: Int , text: String ): Unit Replace the text in the edit text associated with viewId with text .","title":"replaceTextInView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/select-bottom-navigation-item/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / selectBottomNavigationItem selectBottomNavigationItem \u00b6 fun RobotActions .selectBottomNavigationItem(@IdRes bottomNavigationViewResId: Int , navItemTitle: String ): Unit Select the bottom navigation item with navItemTitle from the bottom navigation view associated with bottomNavigationViewResId .","title":"Select bottom navigation item"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/select-bottom-navigation-item/#selectbottomnavigationitem","text":"fun RobotActions .selectBottomNavigationItem(@IdRes bottomNavigationViewResId: Int , navItemTitle: String ): Unit Select the bottom navigation item with navItemTitle from the bottom navigation view associated with bottomNavigationViewResId .","title":"selectBottomNavigationItem"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/select-check-box/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / selectCheckBox selectCheckBox \u00b6 fun RobotActions .selectCheckBox(@IdRes layoutId: Int , text: String ): Unit Select the checkbox with text within the view group associated with layoutId .","title":"Select check box"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/select-check-box/#selectcheckbox","text":"fun RobotActions .selectCheckBox(@IdRes layoutId: Int , text: String ): Unit Select the checkbox with text within the view group associated with layoutId .","title":"selectCheckBox"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/select-navigation-item/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / selectNavigationItem selectNavigationItem \u00b6 fun RobotActions .selectNavigationItem(@IdRes navigationViewResId: Int , @IdRes menuItemResId: Int ): Unit Select the navigation item associated with menuItemResId from the navigation view associated with navigationViewResId .","title":"Select navigation item"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/select-navigation-item/#selectnavigationitem","text":"fun RobotActions .selectNavigationItem(@IdRes navigationViewResId: Int , @IdRes menuItemResId: Int ): Unit Select the navigation item associated with menuItemResId from the navigation view associated with navigationViewResId .","title":"selectNavigationItem"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-down-on-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / swipeDownOnView swipeDownOnView \u00b6 fun swipeDownOnView(@IdRes viewId: Int ): Unit Swipe up down the view associated with viewId .","title":"Swipe down on view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-down-on-view/#swipedownonview","text":"fun swipeDownOnView(@IdRes viewId: Int ): Unit Swipe up down the view associated with viewId .","title":"swipeDownOnView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-left-on-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / swipeLeftOnView swipeLeftOnView \u00b6 fun swipeLeftOnView(@IdRes viewId: Int ): Unit Swipe left on the view associated with viewId .","title":"Swipe left on view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-left-on-view/#swipeleftonview","text":"fun swipeLeftOnView(@IdRes viewId: Int ): Unit Swipe left on the view associated with viewId .","title":"swipeLeftOnView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-right-on-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / swipeRightOnView swipeRightOnView \u00b6 fun swipeRightOnView(@IdRes viewId: Int ): Unit Swipe right on the view associated with viewId .","title":"Swipe right on view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-right-on-view/#swiperightonview","text":"fun swipeRightOnView(@IdRes viewId: Int ): Unit Swipe right on the view associated with viewId .","title":"swipeRightOnView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-up-on-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.action / swipeUpOnView swipeUpOnView \u00b6 fun swipeUpOnView(@IdRes viewId: Int ): Unit Swipe up on the view associated with viewId .","title":"Swipe up on view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.action/swipe-up-on-view/#swipeuponview","text":"fun swipeUpOnView(@IdRes viewId: Int ): Unit Swipe up on the view associated with viewId .","title":"swipeUpOnView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion Package reactivecircus.blueprint.testing.assertion \u00b6 Functions \u00b6 Name Summary activityLaunched Check if the activity of type A has been launched. fun <A : Activity > RobotAssertions .activityLaunched(): Unit backgroundDrawableDisplayed Check if the background drawable associated with resourceId is displayed. fun RobotAssertions .backgroundDrawableDisplayed(resourceId: Int ): Unit bottomNavigationViewItemSelected Check if the bottom navigation view associated with bottomNavigationViewResId has selectedItemResId as the selected item. fun RobotAssertions .bottomNavigationViewItemSelected(bottomNavigationViewResId: Int , selectedItemResId: Int ): Unit dialogWithButton1Displayed Check if a dialog with buttonTextResId as the button 1 label is displayed. fun RobotAssertions .dialogWithButton1Displayed(buttonTextResId: Int ): Unit dialogWithButton2Displayed Check if a dialog with buttonTextResId as the button 2 label is displayed. fun RobotAssertions .dialogWithButton2Displayed(buttonTextResId: Int ): Unit dialogWithButton3Displayed Check if a dialog with buttonTextResId as the button 3 label is displayed. fun RobotAssertions .dialogWithButton3Displayed(buttonTextResId: Int ): Unit dialogWithTextDisplayed Check if a dialog with the title of a string associated with titleResId is displayed. fun RobotAssertions .dialogWithTextDisplayed(titleResId: Int ): Unit Check if a dialog with the title expected is displayed. fun RobotAssertions .dialogWithTextDisplayed(expected: String ): Unit drawableDisplayed Check if the drawable associated with resourceId is displayed. fun RobotAssertions .drawableDisplayed(resourceId: Int ): Unit drawerClosed Check if the drawer associated with drawerId is closed. fun RobotAssertions .drawerClosed(drawerId: Int ): Unit drawerOpened Check if the drawer associated with drawerId is opened. fun RobotAssertions .drawerOpened(drawerId: Int ): Unit foregroundDrawableDisplayed Check if the foreground drawable associated with resourceId is displayed. fun RobotAssertions .foregroundDrawableDisplayed(resourceId: Int ): Unit fragmentDisplayed Check if the fragment of type F with tag is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(tag: String ): Unit Check if the fragment of type F with a navigation host associated with navHostViewId is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(navHostViewId: Int ): Unit keyboardInputTypeIsEmail Check if the edit text associated with viewId has an email input type. fun RobotAssertions .keyboardInputTypeIsEmail(viewId: Int ): Unit noActivityDisplayed Check if no activity is currently displayed fun RobotAssertions .noActivityDisplayed(): Unit radioButtonSelected Check if the radio group associated with radioGroupId has the button with buttonText selected. fun RobotAssertions .radioButtonSelected(radioGroupId: Int , buttonText: String ): Unit radioGroupHasNoSelections Check if the radio group associated with radioGroupId has NO selection. fun RobotAssertions .radioGroupHasNoSelections(radioGroupId: Int ): Unit radioGroupHasSelections Check if the radio group associated with radioGroupId has some selections. fun RobotAssertions .radioGroupHasSelections(radioGroupId: Int ): Unit radioGroupHasText Check if the radio group associated with radioGroupId has buttonTexts as the labels of the radio buttons. fun RobotAssertions .radioGroupHasText(radioGroupId: Int , vararg buttonTexts: String ): Unit recyclerViewHasSize Check if the recycler view associated with recyclerViewId has the size of size . fun RobotAssertions .recyclerViewHasSize(recyclerViewId: Int , size: Int ): Unit snackBarDisplayed Check if a snackbar with text as message is displayed. fun RobotAssertions .snackBarDisplayed(text: String ): Unit textDisplayed Check if all texts associated with textResIds are displayed. fun RobotAssertions .textDisplayed(vararg textResIds: Int ): Unit Check if all texts are displayed. fun RobotAssertions .textDisplayed(vararg texts: String ): Unit textInputLayoutHasError Check if text input layout associated with viewId has errorMessage as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessage: String ): Unit Check if text input layout associated with viewId has string associated with errorMessageResId as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessageResId: Int ): Unit textInputLayoutHasNoError Check if the text input layout associated with viewId has NO error. fun RobotAssertions .textInputLayoutHasNoError(viewId: Int ): Unit textNotDisplayed Check if no views associated with textResIds is displayed. fun RobotAssertions .textNotDisplayed(vararg textResIds: Int ): Unit Check if none of texts is displayed. fun RobotAssertions .textNotDisplayed(vararg texts: String ): Unit toolbarHasSubtitle Check if the current Toolbar has a subtitle of subtitle . fun RobotAssertions .toolbarHasSubtitle(subtitle: String ): Unit Check if the current Toolbar has a subtitle of a string associated with subtitleTextResId . fun RobotAssertions .toolbarHasSubtitle(subtitleTextResId: Int ): Unit toolbarHasTitle Check if the current Toolbar has a title of title . fun RobotAssertions .toolbarHasTitle(title: String ): Unit Check if the current Toolbar has a title of a string associated with titleTextResId . fun RobotAssertions .toolbarHasTitle(titleTextResId: Int ): Unit viewChecked Check if the checkable view associated with viewId is checked. fun RobotAssertions .viewChecked(viewId: Int ): Unit viewClickable Check if the view associated with viewId is clickable. fun RobotAssertions .viewClickable(viewId: Int ): Unit viewContainsText Check if the view associated with viewId has text that contains the expected string. fun RobotAssertions .viewContainsText(viewId: Int , expected: String ): Unit viewDisabled Check if the view associated with viewId is disabled. fun RobotAssertions .viewDisabled(viewId: Int ): Unit viewDisplayed Check if all views associated with viewIds are displayed. fun RobotAssertions .viewDisplayed(vararg viewIds: Int ): Unit viewEnabled Check if the view associated with viewId is enabled. fun RobotAssertions .viewEnabled(viewId: Int ): Unit viewEndsWithText Check if the view associated with viewId has text that ends with the expected string. fun RobotAssertions .viewEndsWithText(viewId: Int , expected: String ): Unit viewHasHint Check if the view associated with viewId has a hint that equals to the string associated with messageResId . fun RobotAssertions .viewHasHint(viewId: Int , messageResId: Int ): Unit viewHasText Check if the view associated with viewId has expected text. fun RobotAssertions .viewHasText(viewId: Int , expected: String ): Unit Check if the view associated with viewId has string associated with messageResId text. fun RobotAssertions .viewHasText(viewId: Int , messageResId: Int ): Unit viewNotChecked Check if the checkable view associated with viewId is NOT checked. fun RobotAssertions .viewNotChecked(viewId: Int ): Unit viewNotClickable Check if the view associated with viewId is NOT clickable. fun RobotAssertions .viewNotClickable(viewId: Int ): Unit viewNotDisplayed Check if all views associated with viewIds are NOT displayed. fun RobotAssertions .viewNotDisplayed(vararg viewIds: Int ): Unit viewStartsWithText Check if the view associated with viewId has text that starts with the expected string. fun RobotAssertions .viewStartsWithText(viewId: Int , expected: String ): Unit","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/#package-reactivecircusblueprinttestingassertion","text":"","title":"Package reactivecircus.blueprint.testing.assertion"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/#functions","text":"Name Summary activityLaunched Check if the activity of type A has been launched. fun <A : Activity > RobotAssertions .activityLaunched(): Unit backgroundDrawableDisplayed Check if the background drawable associated with resourceId is displayed. fun RobotAssertions .backgroundDrawableDisplayed(resourceId: Int ): Unit bottomNavigationViewItemSelected Check if the bottom navigation view associated with bottomNavigationViewResId has selectedItemResId as the selected item. fun RobotAssertions .bottomNavigationViewItemSelected(bottomNavigationViewResId: Int , selectedItemResId: Int ): Unit dialogWithButton1Displayed Check if a dialog with buttonTextResId as the button 1 label is displayed. fun RobotAssertions .dialogWithButton1Displayed(buttonTextResId: Int ): Unit dialogWithButton2Displayed Check if a dialog with buttonTextResId as the button 2 label is displayed. fun RobotAssertions .dialogWithButton2Displayed(buttonTextResId: Int ): Unit dialogWithButton3Displayed Check if a dialog with buttonTextResId as the button 3 label is displayed. fun RobotAssertions .dialogWithButton3Displayed(buttonTextResId: Int ): Unit dialogWithTextDisplayed Check if a dialog with the title of a string associated with titleResId is displayed. fun RobotAssertions .dialogWithTextDisplayed(titleResId: Int ): Unit Check if a dialog with the title expected is displayed. fun RobotAssertions .dialogWithTextDisplayed(expected: String ): Unit drawableDisplayed Check if the drawable associated with resourceId is displayed. fun RobotAssertions .drawableDisplayed(resourceId: Int ): Unit drawerClosed Check if the drawer associated with drawerId is closed. fun RobotAssertions .drawerClosed(drawerId: Int ): Unit drawerOpened Check if the drawer associated with drawerId is opened. fun RobotAssertions .drawerOpened(drawerId: Int ): Unit foregroundDrawableDisplayed Check if the foreground drawable associated with resourceId is displayed. fun RobotAssertions .foregroundDrawableDisplayed(resourceId: Int ): Unit fragmentDisplayed Check if the fragment of type F with tag is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(tag: String ): Unit Check if the fragment of type F with a navigation host associated with navHostViewId is displayed. fun <F : Fragment> RobotAssertions .fragmentDisplayed(navHostViewId: Int ): Unit keyboardInputTypeIsEmail Check if the edit text associated with viewId has an email input type. fun RobotAssertions .keyboardInputTypeIsEmail(viewId: Int ): Unit noActivityDisplayed Check if no activity is currently displayed fun RobotAssertions .noActivityDisplayed(): Unit radioButtonSelected Check if the radio group associated with radioGroupId has the button with buttonText selected. fun RobotAssertions .radioButtonSelected(radioGroupId: Int , buttonText: String ): Unit radioGroupHasNoSelections Check if the radio group associated with radioGroupId has NO selection. fun RobotAssertions .radioGroupHasNoSelections(radioGroupId: Int ): Unit radioGroupHasSelections Check if the radio group associated with radioGroupId has some selections. fun RobotAssertions .radioGroupHasSelections(radioGroupId: Int ): Unit radioGroupHasText Check if the radio group associated with radioGroupId has buttonTexts as the labels of the radio buttons. fun RobotAssertions .radioGroupHasText(radioGroupId: Int , vararg buttonTexts: String ): Unit recyclerViewHasSize Check if the recycler view associated with recyclerViewId has the size of size . fun RobotAssertions .recyclerViewHasSize(recyclerViewId: Int , size: Int ): Unit snackBarDisplayed Check if a snackbar with text as message is displayed. fun RobotAssertions .snackBarDisplayed(text: String ): Unit textDisplayed Check if all texts associated with textResIds are displayed. fun RobotAssertions .textDisplayed(vararg textResIds: Int ): Unit Check if all texts are displayed. fun RobotAssertions .textDisplayed(vararg texts: String ): Unit textInputLayoutHasError Check if text input layout associated with viewId has errorMessage as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessage: String ): Unit Check if text input layout associated with viewId has string associated with errorMessageResId as the error. fun RobotAssertions .textInputLayoutHasError(viewId: Int , errorMessageResId: Int ): Unit textInputLayoutHasNoError Check if the text input layout associated with viewId has NO error. fun RobotAssertions .textInputLayoutHasNoError(viewId: Int ): Unit textNotDisplayed Check if no views associated with textResIds is displayed. fun RobotAssertions .textNotDisplayed(vararg textResIds: Int ): Unit Check if none of texts is displayed. fun RobotAssertions .textNotDisplayed(vararg texts: String ): Unit toolbarHasSubtitle Check if the current Toolbar has a subtitle of subtitle . fun RobotAssertions .toolbarHasSubtitle(subtitle: String ): Unit Check if the current Toolbar has a subtitle of a string associated with subtitleTextResId . fun RobotAssertions .toolbarHasSubtitle(subtitleTextResId: Int ): Unit toolbarHasTitle Check if the current Toolbar has a title of title . fun RobotAssertions .toolbarHasTitle(title: String ): Unit Check if the current Toolbar has a title of a string associated with titleTextResId . fun RobotAssertions .toolbarHasTitle(titleTextResId: Int ): Unit viewChecked Check if the checkable view associated with viewId is checked. fun RobotAssertions .viewChecked(viewId: Int ): Unit viewClickable Check if the view associated with viewId is clickable. fun RobotAssertions .viewClickable(viewId: Int ): Unit viewContainsText Check if the view associated with viewId has text that contains the expected string. fun RobotAssertions .viewContainsText(viewId: Int , expected: String ): Unit viewDisabled Check if the view associated with viewId is disabled. fun RobotAssertions .viewDisabled(viewId: Int ): Unit viewDisplayed Check if all views associated with viewIds are displayed. fun RobotAssertions .viewDisplayed(vararg viewIds: Int ): Unit viewEnabled Check if the view associated with viewId is enabled. fun RobotAssertions .viewEnabled(viewId: Int ): Unit viewEndsWithText Check if the view associated with viewId has text that ends with the expected string. fun RobotAssertions .viewEndsWithText(viewId: Int , expected: String ): Unit viewHasHint Check if the view associated with viewId has a hint that equals to the string associated with messageResId . fun RobotAssertions .viewHasHint(viewId: Int , messageResId: Int ): Unit viewHasText Check if the view associated with viewId has expected text. fun RobotAssertions .viewHasText(viewId: Int , expected: String ): Unit Check if the view associated with viewId has string associated with messageResId text. fun RobotAssertions .viewHasText(viewId: Int , messageResId: Int ): Unit viewNotChecked Check if the checkable view associated with viewId is NOT checked. fun RobotAssertions .viewNotChecked(viewId: Int ): Unit viewNotClickable Check if the view associated with viewId is NOT clickable. fun RobotAssertions .viewNotClickable(viewId: Int ): Unit viewNotDisplayed Check if all views associated with viewIds are NOT displayed. fun RobotAssertions .viewNotDisplayed(vararg viewIds: Int ): Unit viewStartsWithText Check if the view associated with viewId has text that starts with the expected string. fun RobotAssertions .viewStartsWithText(viewId: Int , expected: String ): Unit","title":"Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/activity-launched/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / activityLaunched activityLaunched \u00b6 fun <reified A : Activity > RobotAssertions .activityLaunched(): Unit Check if the activity of type A has been launched.","title":"Activity launched"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/activity-launched/#activitylaunched","text":"fun <reified A : Activity > RobotAssertions .activityLaunched(): Unit Check if the activity of type A has been launched.","title":"activityLaunched"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/background-drawable-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / backgroundDrawableDisplayed backgroundDrawableDisplayed \u00b6 fun RobotAssertions .backgroundDrawableDisplayed(@IdRes resourceId: Int ): Unit Check if the background drawable associated with resourceId is displayed.","title":"Background drawable displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/background-drawable-displayed/#backgrounddrawabledisplayed","text":"fun RobotAssertions .backgroundDrawableDisplayed(@IdRes resourceId: Int ): Unit Check if the background drawable associated with resourceId is displayed.","title":"backgroundDrawableDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/bottom-navigation-view-item-selected/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / bottomNavigationViewItemSelected bottomNavigationViewItemSelected \u00b6 fun RobotAssertions .bottomNavigationViewItemSelected(@IdRes bottomNavigationViewResId: Int , @IdRes selectedItemResId: Int ): Unit Check if the bottom navigation view associated with bottomNavigationViewResId has selectedItemResId as the selected item.","title":"Bottom navigation view item selected"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/bottom-navigation-view-item-selected/#bottomnavigationviewitemselected","text":"fun RobotAssertions .bottomNavigationViewItemSelected(@IdRes bottomNavigationViewResId: Int , @IdRes selectedItemResId: Int ): Unit Check if the bottom navigation view associated with bottomNavigationViewResId has selectedItemResId as the selected item.","title":"bottomNavigationViewItemSelected"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-button1-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / dialogWithButton1Displayed dialogWithButton1Displayed \u00b6 fun RobotAssertions .dialogWithButton1Displayed(@StringRes buttonTextResId: Int ): Unit Check if a dialog with buttonTextResId as the button 1 label is displayed.","title":"Dialog with button1 displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-button1-displayed/#dialogwithbutton1displayed","text":"fun RobotAssertions .dialogWithButton1Displayed(@StringRes buttonTextResId: Int ): Unit Check if a dialog with buttonTextResId as the button 1 label is displayed.","title":"dialogWithButton1Displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-button2-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / dialogWithButton2Displayed dialogWithButton2Displayed \u00b6 fun RobotAssertions .dialogWithButton2Displayed(@StringRes buttonTextResId: Int ): Unit Check if a dialog with buttonTextResId as the button 2 label is displayed.","title":"Dialog with button2 displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-button2-displayed/#dialogwithbutton2displayed","text":"fun RobotAssertions .dialogWithButton2Displayed(@StringRes buttonTextResId: Int ): Unit Check if a dialog with buttonTextResId as the button 2 label is displayed.","title":"dialogWithButton2Displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-button3-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / dialogWithButton3Displayed dialogWithButton3Displayed \u00b6 fun RobotAssertions .dialogWithButton3Displayed(@StringRes buttonTextResId: Int ): Unit Check if a dialog with buttonTextResId as the button 3 label is displayed.","title":"Dialog with button3 displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-button3-displayed/#dialogwithbutton3displayed","text":"fun RobotAssertions .dialogWithButton3Displayed(@StringRes buttonTextResId: Int ): Unit Check if a dialog with buttonTextResId as the button 3 label is displayed.","title":"dialogWithButton3Displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-text-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / dialogWithTextDisplayed dialogWithTextDisplayed \u00b6 fun RobotAssertions .dialogWithTextDisplayed(@StringRes titleResId: Int ): Unit Check if a dialog with the title of a string associated with titleResId is displayed. fun RobotAssertions .dialogWithTextDisplayed(expected: String ): Unit Check if a dialog with the title expected is displayed.","title":"Dialog with text displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/dialog-with-text-displayed/#dialogwithtextdisplayed","text":"fun RobotAssertions .dialogWithTextDisplayed(@StringRes titleResId: Int ): Unit Check if a dialog with the title of a string associated with titleResId is displayed. fun RobotAssertions .dialogWithTextDisplayed(expected: String ): Unit Check if a dialog with the title expected is displayed.","title":"dialogWithTextDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/drawable-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / drawableDisplayed drawableDisplayed \u00b6 fun RobotAssertions .drawableDisplayed(@IdRes resourceId: Int ): Unit Check if the drawable associated with resourceId is displayed.","title":"Drawable displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/drawable-displayed/#drawabledisplayed","text":"fun RobotAssertions .drawableDisplayed(@IdRes resourceId: Int ): Unit Check if the drawable associated with resourceId is displayed.","title":"drawableDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/drawer-closed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / drawerClosed drawerClosed \u00b6 fun RobotAssertions .drawerClosed(@IdRes drawerId: Int ): Unit Check if the drawer associated with drawerId is closed.","title":"Drawer closed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/drawer-closed/#drawerclosed","text":"fun RobotAssertions .drawerClosed(@IdRes drawerId: Int ): Unit Check if the drawer associated with drawerId is closed.","title":"drawerClosed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/drawer-opened/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / drawerOpened drawerOpened \u00b6 fun RobotAssertions .drawerOpened(@IdRes drawerId: Int ): Unit Check if the drawer associated with drawerId is opened.","title":"Drawer opened"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/drawer-opened/#draweropened","text":"fun RobotAssertions .drawerOpened(@IdRes drawerId: Int ): Unit Check if the drawer associated with drawerId is opened.","title":"drawerOpened"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/foreground-drawable-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / foregroundDrawableDisplayed foregroundDrawableDisplayed \u00b6 fun RobotAssertions .foregroundDrawableDisplayed(@IdRes resourceId: Int ): Unit Check if the foreground drawable associated with resourceId is displayed.","title":"Foreground drawable displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/foreground-drawable-displayed/#foregrounddrawabledisplayed","text":"fun RobotAssertions .foregroundDrawableDisplayed(@IdRes resourceId: Int ): Unit Check if the foreground drawable associated with resourceId is displayed.","title":"foregroundDrawableDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/fragment-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / fragmentDisplayed fragmentDisplayed \u00b6 fun <reified F : Fragment> RobotAssertions .fragmentDisplayed(tag: String ): Unit Check if the fragment of type F with tag is displayed. fun <reified F : Fragment> RobotAssertions .fragmentDisplayed(@IdRes navHostViewId: Int ): Unit Check if the fragment of type F with a navigation host associated with navHostViewId is displayed.","title":"Fragment displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/fragment-displayed/#fragmentdisplayed","text":"fun <reified F : Fragment> RobotAssertions .fragmentDisplayed(tag: String ): Unit Check if the fragment of type F with tag is displayed. fun <reified F : Fragment> RobotAssertions .fragmentDisplayed(@IdRes navHostViewId: Int ): Unit Check if the fragment of type F with a navigation host associated with navHostViewId is displayed.","title":"fragmentDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/keyboard-input-type-is-email/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / keyboardInputTypeIsEmail keyboardInputTypeIsEmail \u00b6 fun RobotAssertions .keyboardInputTypeIsEmail(@IdRes viewId: Int ): Unit Check if the edit text associated with viewId has an email input type.","title":"Keyboard input type is email"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/keyboard-input-type-is-email/#keyboardinputtypeisemail","text":"fun RobotAssertions .keyboardInputTypeIsEmail(@IdRes viewId: Int ): Unit Check if the edit text associated with viewId has an email input type.","title":"keyboardInputTypeIsEmail"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/no-activity-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / noActivityDisplayed noActivityDisplayed \u00b6 fun RobotAssertions .noActivityDisplayed(): Unit Check if no activity is currently displayed","title":"No activity displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/no-activity-displayed/#noactivitydisplayed","text":"fun RobotAssertions .noActivityDisplayed(): Unit Check if no activity is currently displayed","title":"noActivityDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-button-selected/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / radioButtonSelected radioButtonSelected \u00b6 fun RobotAssertions .radioButtonSelected(@IdRes radioGroupId: Int , buttonText: String ): Unit Check if the radio group associated with radioGroupId has the button with buttonText selected.","title":"Radio button selected"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-button-selected/#radiobuttonselected","text":"fun RobotAssertions .radioButtonSelected(@IdRes radioGroupId: Int , buttonText: String ): Unit Check if the radio group associated with radioGroupId has the button with buttonText selected.","title":"radioButtonSelected"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-group-has-no-selections/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / radioGroupHasNoSelections radioGroupHasNoSelections \u00b6 fun RobotAssertions .radioGroupHasNoSelections(@IdRes radioGroupId: Int ): Unit Check if the radio group associated with radioGroupId has NO selection.","title":"Radio group has no selections"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-group-has-no-selections/#radiogrouphasnoselections","text":"fun RobotAssertions .radioGroupHasNoSelections(@IdRes radioGroupId: Int ): Unit Check if the radio group associated with radioGroupId has NO selection.","title":"radioGroupHasNoSelections"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-group-has-selections/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / radioGroupHasSelections radioGroupHasSelections \u00b6 fun RobotAssertions .radioGroupHasSelections(@IdRes radioGroupId: Int ): Unit Check if the radio group associated with radioGroupId has some selections.","title":"Radio group has selections"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-group-has-selections/#radiogrouphasselections","text":"fun RobotAssertions .radioGroupHasSelections(@IdRes radioGroupId: Int ): Unit Check if the radio group associated with radioGroupId has some selections.","title":"radioGroupHasSelections"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-group-has-text/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / radioGroupHasText radioGroupHasText \u00b6 fun RobotAssertions .radioGroupHasText(@IdRes radioGroupId: Int , vararg buttonTexts: String ): Unit Check if the radio group associated with radioGroupId has buttonTexts as the labels of the radio buttons.","title":"Radio group has text"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/radio-group-has-text/#radiogrouphastext","text":"fun RobotAssertions .radioGroupHasText(@IdRes radioGroupId: Int , vararg buttonTexts: String ): Unit Check if the radio group associated with radioGroupId has buttonTexts as the labels of the radio buttons.","title":"radioGroupHasText"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/recycler-view-has-size/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / recyclerViewHasSize recyclerViewHasSize \u00b6 fun RobotAssertions .recyclerViewHasSize(@IdRes recyclerViewId: Int , size: Int ): Unit Check if the recycler view associated with recyclerViewId has the size of size .","title":"Recycler view has size"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/recycler-view-has-size/#recyclerviewhassize","text":"fun RobotAssertions .recyclerViewHasSize(@IdRes recyclerViewId: Int , size: Int ): Unit Check if the recycler view associated with recyclerViewId has the size of size .","title":"recyclerViewHasSize"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/snack-bar-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / snackBarDisplayed snackBarDisplayed \u00b6 fun RobotAssertions .snackBarDisplayed(text: String ): Unit Check if a snackbar with text as message is displayed.","title":"Snack bar displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/snack-bar-displayed/#snackbardisplayed","text":"fun RobotAssertions .snackBarDisplayed(text: String ): Unit Check if a snackbar with text as message is displayed.","title":"snackBarDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / textDisplayed textDisplayed \u00b6 fun RobotAssertions .textDisplayed(@StringRes vararg textResIds: Int ): Unit Check if all texts associated with textResIds are displayed. fun RobotAssertions .textDisplayed(vararg texts: String ): Unit Check if all texts are displayed.","title":"Text displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-displayed/#textdisplayed","text":"fun RobotAssertions .textDisplayed(@StringRes vararg textResIds: Int ): Unit Check if all texts associated with textResIds are displayed. fun RobotAssertions .textDisplayed(vararg texts: String ): Unit Check if all texts are displayed.","title":"textDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-input-layout-has-error/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / textInputLayoutHasError textInputLayoutHasError \u00b6 fun RobotAssertions .textInputLayoutHasError(@IdRes viewId: Int , errorMessage: String ): Unit Check if text input layout associated with viewId has errorMessage as the error. fun RobotAssertions .textInputLayoutHasError(@IdRes viewId: Int , @StringRes errorMessageResId: Int ): Unit Check if text input layout associated with viewId has string associated with errorMessageResId as the error.","title":"Text input layout has error"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-input-layout-has-error/#textinputlayouthaserror","text":"fun RobotAssertions .textInputLayoutHasError(@IdRes viewId: Int , errorMessage: String ): Unit Check if text input layout associated with viewId has errorMessage as the error. fun RobotAssertions .textInputLayoutHasError(@IdRes viewId: Int , @StringRes errorMessageResId: Int ): Unit Check if text input layout associated with viewId has string associated with errorMessageResId as the error.","title":"textInputLayoutHasError"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-input-layout-has-no-error/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / textInputLayoutHasNoError textInputLayoutHasNoError \u00b6 fun RobotAssertions .textInputLayoutHasNoError(@IdRes viewId: Int ): Unit Check if the text input layout associated with viewId has NO error.","title":"Text input layout has no error"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-input-layout-has-no-error/#textinputlayouthasnoerror","text":"fun RobotAssertions .textInputLayoutHasNoError(@IdRes viewId: Int ): Unit Check if the text input layout associated with viewId has NO error.","title":"textInputLayoutHasNoError"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-not-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / textNotDisplayed textNotDisplayed \u00b6 fun RobotAssertions .textNotDisplayed(@StringRes vararg textResIds: Int ): Unit Check if no views associated with textResIds is displayed. fun RobotAssertions .textNotDisplayed(vararg texts: String ): Unit Check if none of texts is displayed.","title":"Text not displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/text-not-displayed/#textnotdisplayed","text":"fun RobotAssertions .textNotDisplayed(@StringRes vararg textResIds: Int ): Unit Check if no views associated with textResIds is displayed. fun RobotAssertions .textNotDisplayed(vararg texts: String ): Unit Check if none of texts is displayed.","title":"textNotDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/toolbar-has-subtitle/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / toolbarHasSubtitle toolbarHasSubtitle \u00b6 fun RobotAssertions .toolbarHasSubtitle(subtitle: String ): Unit Check if the current Toolbar has a subtitle of subtitle . fun RobotAssertions .toolbarHasSubtitle(@StringRes subtitleTextResId: Int ): Unit Check if the current Toolbar has a subtitle of a string associated with subtitleTextResId .","title":"Toolbar has subtitle"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/toolbar-has-subtitle/#toolbarhassubtitle","text":"fun RobotAssertions .toolbarHasSubtitle(subtitle: String ): Unit Check if the current Toolbar has a subtitle of subtitle . fun RobotAssertions .toolbarHasSubtitle(@StringRes subtitleTextResId: Int ): Unit Check if the current Toolbar has a subtitle of a string associated with subtitleTextResId .","title":"toolbarHasSubtitle"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/toolbar-has-title/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / toolbarHasTitle toolbarHasTitle \u00b6 fun RobotAssertions .toolbarHasTitle(title: String ): Unit Check if the current Toolbar has a title of title . fun RobotAssertions .toolbarHasTitle(@StringRes titleTextResId: Int ): Unit Check if the current Toolbar has a title of a string associated with titleTextResId .","title":"Toolbar has title"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/toolbar-has-title/#toolbarhastitle","text":"fun RobotAssertions .toolbarHasTitle(title: String ): Unit Check if the current Toolbar has a title of title . fun RobotAssertions .toolbarHasTitle(@StringRes titleTextResId: Int ): Unit Check if the current Toolbar has a title of a string associated with titleTextResId .","title":"toolbarHasTitle"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-checked/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewChecked viewChecked \u00b6 fun RobotAssertions .viewChecked(@IdRes viewId: Int ): Unit Check if the checkable view associated with viewId is checked.","title":"View checked"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-checked/#viewchecked","text":"fun RobotAssertions .viewChecked(@IdRes viewId: Int ): Unit Check if the checkable view associated with viewId is checked.","title":"viewChecked"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-clickable/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewClickable viewClickable \u00b6 fun RobotAssertions .viewClickable(@IdRes viewId: Int ): Unit Check if the view associated with viewId is clickable.","title":"View clickable"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-clickable/#viewclickable","text":"fun RobotAssertions .viewClickable(@IdRes viewId: Int ): Unit Check if the view associated with viewId is clickable.","title":"viewClickable"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-contains-text/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewContainsText viewContainsText \u00b6 fun RobotAssertions .viewContainsText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has text that contains the expected string.","title":"View contains text"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-contains-text/#viewcontainstext","text":"fun RobotAssertions .viewContainsText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has text that contains the expected string.","title":"viewContainsText"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-disabled/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewDisabled viewDisabled \u00b6 fun RobotAssertions .viewDisabled(@IdRes viewId: Int ): Unit Check if the view associated with viewId is disabled.","title":"View disabled"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-disabled/#viewdisabled","text":"fun RobotAssertions .viewDisabled(@IdRes viewId: Int ): Unit Check if the view associated with viewId is disabled.","title":"viewDisabled"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewDisplayed viewDisplayed \u00b6 fun RobotAssertions .viewDisplayed(@IdRes vararg viewIds: Int ): Unit Check if all views associated with viewIds are displayed.","title":"View displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-displayed/#viewdisplayed","text":"fun RobotAssertions .viewDisplayed(@IdRes vararg viewIds: Int ): Unit Check if all views associated with viewIds are displayed.","title":"viewDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-enabled/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewEnabled viewEnabled \u00b6 fun RobotAssertions .viewEnabled(@IdRes viewId: Int ): Unit Check if the view associated with viewId is enabled.","title":"View enabled"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-enabled/#viewenabled","text":"fun RobotAssertions .viewEnabled(@IdRes viewId: Int ): Unit Check if the view associated with viewId is enabled.","title":"viewEnabled"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-ends-with-text/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewEndsWithText viewEndsWithText \u00b6 fun RobotAssertions .viewEndsWithText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has text that ends with the expected string.","title":"View ends with text"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-ends-with-text/#viewendswithtext","text":"fun RobotAssertions .viewEndsWithText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has text that ends with the expected string.","title":"viewEndsWithText"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-has-hint/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewHasHint viewHasHint \u00b6 fun RobotAssertions .viewHasHint(@IdRes viewId: Int , @StringRes messageResId: Int ): Unit Check if the view associated with viewId has a hint that equals to the string associated with messageResId .","title":"View has hint"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-has-hint/#viewhashint","text":"fun RobotAssertions .viewHasHint(@IdRes viewId: Int , @StringRes messageResId: Int ): Unit Check if the view associated with viewId has a hint that equals to the string associated with messageResId .","title":"viewHasHint"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-has-text/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewHasText viewHasText \u00b6 fun RobotAssertions .viewHasText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has expected text. fun RobotAssertions .viewHasText(@IdRes viewId: Int , @StringRes messageResId: Int ): Unit Check if the view associated with viewId has string associated with messageResId text.","title":"View has text"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-has-text/#viewhastext","text":"fun RobotAssertions .viewHasText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has expected text. fun RobotAssertions .viewHasText(@IdRes viewId: Int , @StringRes messageResId: Int ): Unit Check if the view associated with viewId has string associated with messageResId text.","title":"viewHasText"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-not-checked/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewNotChecked viewNotChecked \u00b6 fun RobotAssertions .viewNotChecked(@IdRes viewId: Int ): Unit Check if the checkable view associated with viewId is NOT checked.","title":"View not checked"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-not-checked/#viewnotchecked","text":"fun RobotAssertions .viewNotChecked(@IdRes viewId: Int ): Unit Check if the checkable view associated with viewId is NOT checked.","title":"viewNotChecked"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-not-clickable/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewNotClickable viewNotClickable \u00b6 fun RobotAssertions .viewNotClickable(@IdRes viewId: Int ): Unit Check if the view associated with viewId is NOT clickable.","title":"View not clickable"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-not-clickable/#viewnotclickable","text":"fun RobotAssertions .viewNotClickable(@IdRes viewId: Int ): Unit Check if the view associated with viewId is NOT clickable.","title":"viewNotClickable"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-not-displayed/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewNotDisplayed viewNotDisplayed \u00b6 fun RobotAssertions .viewNotDisplayed(@IdRes vararg viewIds: Int ): Unit Check if all views associated with viewIds are NOT displayed.","title":"View not displayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-not-displayed/#viewnotdisplayed","text":"fun RobotAssertions .viewNotDisplayed(@IdRes vararg viewIds: Int ): Unit Check if all views associated with viewIds are NOT displayed.","title":"viewNotDisplayed"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-starts-with-text/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.assertion / viewStartsWithText viewStartsWithText \u00b6 fun RobotAssertions .viewStartsWithText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has text that starts with the expected string.","title":"View starts with text"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.assertion/view-starts-with-text/#viewstartswithtext","text":"fun RobotAssertions .viewStartsWithText(@IdRes viewId: Int , expected: String ): Unit Check if the view associated with viewId has text that starts with the expected string.","title":"viewStartsWithText"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.matcher Package reactivecircus.blueprint.testing.matcher \u00b6 Types \u00b6 Name Summary RecyclerViewMatcher class RecyclerViewMatcher Functions \u00b6 Name Summary containsIgnoringCase Returns a matcher that matches string containing a subString (case insensitive). fun containsIgnoringCase(subString: String ): Matcher< String > withRecyclerView Returns a matcher that matches a view in the RecyclerView at certain position. fun withRecyclerView(recyclerViewId: Int ): RecyclerViewMatcher","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/#package-reactivecircusblueprinttestingmatcher","text":"","title":"Package reactivecircus.blueprint.testing.matcher"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/#types","text":"Name Summary RecyclerViewMatcher class RecyclerViewMatcher","title":"Types"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/#functions","text":"Name Summary containsIgnoringCase Returns a matcher that matches string containing a subString (case insensitive). fun containsIgnoringCase(subString: String ): Matcher< String > withRecyclerView Returns a matcher that matches a view in the RecyclerView at certain position. fun withRecyclerView(recyclerViewId: Int ): RecyclerViewMatcher","title":"Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/contains-ignoring-case/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.matcher / containsIgnoringCase containsIgnoringCase \u00b6 fun containsIgnoringCase(subString: String ): Matcher< String > Returns a matcher that matches string containing a subString (case insensitive).","title":"Contains ignoring case"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/contains-ignoring-case/#containsignoringcase","text":"fun containsIgnoringCase(subString: String ): Matcher< String > Returns a matcher that matches string containing a subString (case insensitive).","title":"containsIgnoringCase"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/with-recycler-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.matcher / withRecyclerView withRecyclerView \u00b6 fun withRecyclerView(@IdRes recyclerViewId: Int ): RecyclerViewMatcher Returns a matcher that matches a view in the RecyclerView at certain position.","title":"With recycler view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/with-recycler-view/#withrecyclerview","text":"fun withRecyclerView(@IdRes recyclerViewId: Int ): RecyclerViewMatcher Returns a matcher that matches a view in the RecyclerView at certain position.","title":"withRecyclerView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.matcher / RecyclerViewMatcher RecyclerViewMatcher \u00b6 class RecyclerViewMatcher Constructors \u00b6 Name Summary <init> RecyclerViewMatcher(recyclerViewId: Int ) Functions \u00b6 Name Summary atPosition fun atPosition(position: Int ): Matcher< View > atPositionOnView fun atPositionOnView(position: Int , targetViewId: Int ): Matcher< View >","title":"Index"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/#recyclerviewmatcher","text":"class RecyclerViewMatcher","title":"RecyclerViewMatcher"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/#constructors","text":"Name Summary <init> RecyclerViewMatcher(recyclerViewId: Int )","title":"Constructors"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/#functions","text":"Name Summary atPosition fun atPosition(position: Int ): Matcher< View > atPositionOnView fun atPositionOnView(position: Int , targetViewId: Int ): Matcher< View >","title":"Functions"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/-init-/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.matcher / RecyclerViewMatcher / <init> <init> \u00b6 RecyclerViewMatcher(recyclerViewId: Int )","title":" init "},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/-init-/#init","text":"RecyclerViewMatcher(recyclerViewId: Int )","title":"&lt;init&gt;"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/at-position-on-view/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.matcher / RecyclerViewMatcher / atPositionOnView atPositionOnView \u00b6 fun atPositionOnView(position: Int , targetViewId: Int ): Matcher< View >","title":"At position on view"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/at-position-on-view/#atpositiononview","text":"fun atPositionOnView(position: Int , targetViewId: Int ): Matcher< View >","title":"atPositionOnView"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/at-position/","text":"blueprint-testing-robot / reactivecircus.blueprint.testing.matcher / RecyclerViewMatcher / atPosition atPosition \u00b6 fun atPosition(position: Int ): Matcher< View >","title":"At position"},{"location":"api/blueprint-testing-robot/reactivecircus.blueprint.testing.matcher/-recycler-view-matcher/at-position/#atposition","text":"fun atPosition(position: Int ): Matcher< View >","title":"atPosition"},{"location":"api/blueprint-ui/","text":"blueprint-ui Packages \u00b6 Name Summary reactivecircus.blueprint.ui.extension Index \u00b6 All Types","title":"blueprint-ui"},{"location":"api/blueprint-ui/#packages","text":"Name Summary reactivecircus.blueprint.ui.extension","title":"Packages"},{"location":"api/blueprint-ui/#index","text":"All Types","title":"Index"},{"location":"api/blueprint-ui/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package reactivecircus.blueprint.ui.extension) android.app.Activity \u00b6 | (extensions in package reactivecircus.blueprint.ui.extension) androidx.appcompat.widget.AppCompatTextView \u00b6 | (extensions in package reactivecircus.blueprint.ui.extension) android.content.Context \u00b6","title":"Index"},{"location":"api/blueprint-ui/alltypes/#all-types","text":"Name Summary (extensions in package reactivecircus.blueprint.ui.extension)","title":"All Types"},{"location":"api/blueprint-ui/alltypes/#androidappactivity","text":"| (extensions in package reactivecircus.blueprint.ui.extension)","title":"android.app.Activity"},{"location":"api/blueprint-ui/alltypes/#androidxappcompatwidgetappcompattextview","text":"| (extensions in package reactivecircus.blueprint.ui.extension)","title":"androidx.appcompat.widget.AppCompatTextView"},{"location":"api/blueprint-ui/alltypes/#androidcontentcontext","text":"","title":"android.content.Context"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension Package reactivecircus.blueprint.ui.extension \u00b6 Extensions for External Classes \u00b6 Name Summary android.app.Activity android.content.Context androidx.appcompat.widget.AppCompatTextView Functions \u00b6 Name Summary newIntent Creates a new intent of type T . fun <T : Activity > newIntent(context: Context ): Intent","title":"Index"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/#package-reactivecircusblueprintuiextension","text":"","title":"Package reactivecircus.blueprint.ui.extension"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/#extensions-for-external-classes","text":"Name Summary android.app.Activity android.content.Context androidx.appcompat.widget.AppCompatTextView","title":"Extensions for External Classes"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/#functions","text":"Name Summary newIntent Creates a new intent of type T . fun <T : Activity > newIntent(context: Context ): Intent","title":"Functions"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/new-intent/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / newIntent newIntent \u00b6 fun <reified T : Activity > newIntent(context: Context ): Intent Creates a new intent of type T .","title":"New intent"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/new-intent/#newintent","text":"fun <reified T : Activity > newIntent(context: Context ): Intent Creates a new intent of type T .","title":"newIntent"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity Extensions for android.app.Activity \u00b6 Name Summary hideKeyboard Programmatically close soft keyboard. fun Activity .hideKeyboard(focusedView: View ): Unit hideStatusBar Hides status bar from the activity. fun Activity .hideStatusBar(): Unit launchActivity Launches an activity from an Activity via Activity.startActivityForResult . fun <T : Activity > Activity .launchActivity(requestCode: Int , options: Bundle ? = null, init: Intent .() -> Unit = {}): Unit screenSize Returns screen size of the activity. val Activity .screenSize: DisplayMetrics setStatusBarColor Sets status bar color on the activity and optionally draws the status bar system ui in light or dark mode. fun Activity .setStatusBarColor(colorRes: Int , lightBackground: Boolean = false): Unit showKeyboard Programmatically show soft keyboard. fun Activity .showKeyboard(): Unit showStatusBar Shows status bar on the activity. fun Activity .showStatusBar(): Unit","title":"Index"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/#extensions-for-androidappactivity","text":"Name Summary hideKeyboard Programmatically close soft keyboard. fun Activity .hideKeyboard(focusedView: View ): Unit hideStatusBar Hides status bar from the activity. fun Activity .hideStatusBar(): Unit launchActivity Launches an activity from an Activity via Activity.startActivityForResult . fun <T : Activity > Activity .launchActivity(requestCode: Int , options: Bundle ? = null, init: Intent .() -> Unit = {}): Unit screenSize Returns screen size of the activity. val Activity .screenSize: DisplayMetrics setStatusBarColor Sets status bar color on the activity and optionally draws the status bar system ui in light or dark mode. fun Activity .setStatusBarColor(colorRes: Int , lightBackground: Boolean = false): Unit showKeyboard Programmatically show soft keyboard. fun Activity .showKeyboard(): Unit showStatusBar Shows status bar on the activity. fun Activity .showStatusBar(): Unit","title":"Extensions for android.app.Activity"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/hide-keyboard/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity / hideKeyboard hideKeyboard \u00b6 fun Activity .hideKeyboard(focusedView: View ): Unit Programmatically close soft keyboard.","title":"Hide keyboard"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/hide-keyboard/#hidekeyboard","text":"fun Activity .hideKeyboard(focusedView: View ): Unit Programmatically close soft keyboard.","title":"hideKeyboard"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/hide-status-bar/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity / hideStatusBar hideStatusBar \u00b6 fun Activity .hideStatusBar(): Unit Hides status bar from the activity.","title":"Hide status bar"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/hide-status-bar/#hidestatusbar","text":"fun Activity .hideStatusBar(): Unit Hides status bar from the activity.","title":"hideStatusBar"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/launch-activity/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity / launchActivity launchActivity \u00b6 inline fun <reified T : Activity > Activity .launchActivity(requestCode: Int , options: Bundle ? = null, noinline init: Intent .() -> Unit = {}): Unit Launches an activity from an Activity via Activity.startActivityForResult . Parameters \u00b6 requestCode - * the requestCode to be passed into Activity.startActivityForResult options - * the options bundle to be passed into Activity.startActivityForResult","title":"Launch activity"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/launch-activity/#launchactivity","text":"inline fun <reified T : Activity > Activity .launchActivity(requestCode: Int , options: Bundle ? = null, noinline init: Intent .() -> Unit = {}): Unit Launches an activity from an Activity via Activity.startActivityForResult .","title":"launchActivity"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/launch-activity/#parameters","text":"requestCode - * the requestCode to be passed into Activity.startActivityForResult options - * the options bundle to be passed into Activity.startActivityForResult","title":"Parameters"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/screen-size/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity / screenSize screenSize \u00b6 val Activity .screenSize: DisplayMetrics Returns screen size of the activity.","title":"Screen size"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/screen-size/#screensize","text":"val Activity .screenSize: DisplayMetrics Returns screen size of the activity.","title":"screenSize"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/set-status-bar-color/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity / setStatusBarColor setStatusBarColor \u00b6 fun Activity .setStatusBarColor(@ColorRes colorRes: Int , lightBackground: Boolean = false): Unit Sets status bar color on the activity and optionally draws the status bar system ui in light or dark mode. Parameters \u00b6 colorRes - resource ID of the color to be set to the status bar. lightBackground - whether to draw the status bar such that. it is compatible with a light status bar background.","title":"Set status bar color"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/set-status-bar-color/#setstatusbarcolor","text":"fun Activity .setStatusBarColor(@ColorRes colorRes: Int , lightBackground: Boolean = false): Unit Sets status bar color on the activity and optionally draws the status bar system ui in light or dark mode.","title":"setStatusBarColor"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/set-status-bar-color/#parameters","text":"colorRes - resource ID of the color to be set to the status bar. lightBackground - whether to draw the status bar such that. it is compatible with a light status bar background.","title":"Parameters"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/show-keyboard/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity / showKeyboard showKeyboard \u00b6 fun Activity .showKeyboard(): Unit Programmatically show soft keyboard.","title":"Show keyboard"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/show-keyboard/#showkeyboard","text":"fun Activity .showKeyboard(): Unit Programmatically show soft keyboard.","title":"showKeyboard"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/show-status-bar/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.app.Activity / showStatusBar showStatusBar \u00b6 fun Activity .showStatusBar(): Unit Shows status bar on the activity.","title":"Show status bar"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.app.-activity/show-status-bar/#showstatusbar","text":"fun Activity .showStatusBar(): Unit Shows status bar on the activity.","title":"showStatusBar"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.content.Context Extensions for android.content.Context \u00b6 Name Summary isAnimationOn Whether animation is turned on on the device. val Context .isAnimationOn: Boolean launchActivity Launches an activity from a Context via Activity.startActivity . fun <T : Activity > Context .launchActivity(options: Bundle ? = null, init: Intent .() -> Unit = {}): Unit resolveColorAttr Resolves the given color attribute and returns the resource ID associated with the color. fun Context .resolveColorAttr(colorAttr: Int ): Int tintVectorDrawable Apply tinting to a vector drawable. fun Context .tintVectorDrawable(theme: Theme , resId: Int , tint: Int ): Drawable","title":"Index"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/#extensions-for-androidcontentcontext","text":"Name Summary isAnimationOn Whether animation is turned on on the device. val Context .isAnimationOn: Boolean launchActivity Launches an activity from a Context via Activity.startActivity . fun <T : Activity > Context .launchActivity(options: Bundle ? = null, init: Intent .() -> Unit = {}): Unit resolveColorAttr Resolves the given color attribute and returns the resource ID associated with the color. fun Context .resolveColorAttr(colorAttr: Int ): Int tintVectorDrawable Apply tinting to a vector drawable. fun Context .tintVectorDrawable(theme: Theme , resId: Int , tint: Int ): Drawable","title":"Extensions for android.content.Context"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/is-animation-on/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.content.Context / isAnimationOn isAnimationOn \u00b6 val Context .isAnimationOn: Boolean Whether animation is turned on on the device.","title":"Is animation on"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/is-animation-on/#isanimationon","text":"val Context .isAnimationOn: Boolean Whether animation is turned on on the device.","title":"isAnimationOn"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/launch-activity/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.content.Context / launchActivity launchActivity \u00b6 inline fun <reified T : Activity > Context .launchActivity(options: Bundle ? = null, noinline init: Intent .() -> Unit = {}): Unit Launches an activity from a Context via Activity.startActivity . Parameters \u00b6 options - * the options bundle to be passed into Activity.startActivity","title":"Launch activity"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/launch-activity/#launchactivity","text":"inline fun <reified T : Activity > Context .launchActivity(options: Bundle ? = null, noinline init: Intent .() -> Unit = {}): Unit Launches an activity from a Context via Activity.startActivity .","title":"launchActivity"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/launch-activity/#parameters","text":"options - * the options bundle to be passed into Activity.startActivity","title":"Parameters"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/resolve-color-attr/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.content.Context / resolveColorAttr resolveColorAttr \u00b6 fun Context .resolveColorAttr(@AttrRes colorAttr: Int ): Int Resolves the given color attribute and returns the resource ID associated with the color.","title":"Resolve color attr"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/resolve-color-attr/#resolvecolorattr","text":"fun Context .resolveColorAttr(@AttrRes colorAttr: Int ): Int Resolves the given color attribute and returns the resource ID associated with the color.","title":"resolveColorAttr"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/tint-vector-drawable/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / android.content.Context / tintVectorDrawable tintVectorDrawable \u00b6 fun Context .tintVectorDrawable(theme: Theme , @DrawableRes resId: Int , tint: Int ): Drawable Apply tinting to a vector drawable.","title":"Tint vector drawable"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/android.content.-context/tint-vector-drawable/#tintvectordrawable","text":"fun Context .tintVectorDrawable(theme: Theme , @DrawableRes resId: Int , tint: Int ): Drawable Apply tinting to a vector drawable.","title":"tintVectorDrawable"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/androidx.appcompat.widget.-app-compat-text-view/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / androidx.appcompat.widget.AppCompatTextView Extensions for androidx.appcompat.widget.AppCompatTextView \u00b6 Name Summary setPrecomputedTextFuture Sets the precomputed text future on the AppCompatTextView . fun AppCompatTextView.setPrecomputedTextFuture(charSequence: CharSequence , executor: Executor ? = null): Unit","title":"Index"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/androidx.appcompat.widget.-app-compat-text-view/#extensions-for-androidxappcompatwidgetappcompattextview","text":"Name Summary setPrecomputedTextFuture Sets the precomputed text future on the AppCompatTextView . fun AppCompatTextView.setPrecomputedTextFuture(charSequence: CharSequence , executor: Executor ? = null): Unit","title":"Extensions for androidx.appcompat.widget.AppCompatTextView"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/androidx.appcompat.widget.-app-compat-text-view/set-precomputed-text-future/","text":"blueprint-ui / reactivecircus.blueprint.ui.extension / androidx.appcompat.widget.AppCompatTextView / setPrecomputedTextFuture setPrecomputedTextFuture \u00b6 fun AppCompatTextView.setPrecomputedTextFuture(charSequence: CharSequence , executor: Executor ? = null): Unit Sets the precomputed text future on the AppCompatTextView . Parameters \u00b6 charSequence - the text to be displayed executor - the executor to be used for processing the text layout. Default single threaded pool will be used if null is passed in.","title":"Set precomputed text future"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/androidx.appcompat.widget.-app-compat-text-view/set-precomputed-text-future/#setprecomputedtextfuture","text":"fun AppCompatTextView.setPrecomputedTextFuture(charSequence: CharSequence , executor: Executor ? = null): Unit Sets the precomputed text future on the AppCompatTextView .","title":"setPrecomputedTextFuture"},{"location":"api/blueprint-ui/reactivecircus.blueprint.ui.extension/androidx.appcompat.widget.-app-compat-text-view/set-precomputed-text-future/#parameters","text":"charSequence - the text to be displayed executor - the executor to be used for processing the text layout. Default single threaded pool will be used if null is passed in.","title":"Parameters"},{"location":"blueprint-async-coroutines/","text":"Blueprint Async Coroutines \u00b6 This library provides a CoroutineDispatcherProvider class to encapsulate the threading behavior with a wrapper API. Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-async-coroutines:${blueprint_version}\" Usage \u00b6 CoroutineDispatcherProvider has 3 properties, representing the common groups of threading use cases in an app: io: CoroutineDispatcher - Dispatcher for IO-bound work computation: CoroutineDispatcher - Dispatcher for computational work ui: CoroutineDispatcher - Dispatcher for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of CoroutineDispatcherProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: CoroutineDispatcherProvider ( io = Dispatchers . IO , computation = Dispatchers . Default , ui = Dispatchers . Main . immediate ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: CoroutineDispatcherProvider ( io = testCoroutineDispatcher , computation = testCoroutineDispatcher , ui = testCoroutineDispatcher ) where testCoroutineDispatcher is an instance of TestCoroutineDispatcher from the org.jetbrains.kotlinx:kotlinx-coroutines-test library.","title":"Async Coroutines"},{"location":"blueprint-async-coroutines/#blueprint-async-coroutines","text":"This library provides a CoroutineDispatcherProvider class to encapsulate the threading behavior with a wrapper API.","title":"Blueprint Async Coroutines"},{"location":"blueprint-async-coroutines/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-async-coroutines:${blueprint_version}\"","title":"Dependency"},{"location":"blueprint-async-coroutines/#usage","text":"CoroutineDispatcherProvider has 3 properties, representing the common groups of threading use cases in an app: io: CoroutineDispatcher - Dispatcher for IO-bound work computation: CoroutineDispatcher - Dispatcher for computational work ui: CoroutineDispatcher - Dispatcher for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of CoroutineDispatcherProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: CoroutineDispatcherProvider ( io = Dispatchers . IO , computation = Dispatchers . Default , ui = Dispatchers . Main . immediate ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: CoroutineDispatcherProvider ( io = testCoroutineDispatcher , computation = testCoroutineDispatcher , ui = testCoroutineDispatcher ) where testCoroutineDispatcher is an instance of TestCoroutineDispatcher from the org.jetbrains.kotlinx:kotlinx-coroutines-test library.","title":"Usage"},{"location":"blueprint-async-rx2/","text":"Blueprint Async RxJava 2 \u00b6 This library provides a SchedulerProvider class to encapsulate the threading behavior with a wrapper API. Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx2:${blueprint_version}\" Usage \u00b6 SchedulerProvider has 3 properties, representing the common groups of threading use cases in an app: io: Scheduler - Scheduler for IO-bound work computation: Scheduler - Scheduler for computational work ui: Scheduler - Scheduler for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of SchedulerProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: SchedulerProvider ( io = Schedulers . io (), computation = Schedulers . computation (), ui = AndroidSchedulers . mainThread () ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: SchedulerProvider ( io = Schedulers . trampoline (), computation = Schedulers . trampoline (), ui = Schedulers . trampoline () )","title":"Async RxJava 2"},{"location":"blueprint-async-rx2/#blueprint-async-rxjava-2","text":"This library provides a SchedulerProvider class to encapsulate the threading behavior with a wrapper API.","title":"Blueprint Async RxJava 2"},{"location":"blueprint-async-rx2/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx2:${blueprint_version}\"","title":"Dependency"},{"location":"blueprint-async-rx2/#usage","text":"SchedulerProvider has 3 properties, representing the common groups of threading use cases in an app: io: Scheduler - Scheduler for IO-bound work computation: Scheduler - Scheduler for computational work ui: Scheduler - Scheduler for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of SchedulerProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: SchedulerProvider ( io = Schedulers . io (), computation = Schedulers . computation (), ui = AndroidSchedulers . mainThread () ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: SchedulerProvider ( io = Schedulers . trampoline (), computation = Schedulers . trampoline (), ui = Schedulers . trampoline () )","title":"Usage"},{"location":"blueprint-async-rx3/","text":"Blueprint Async RxJava 3 \u00b6 This library provides a SchedulerProvider class to encapsulate the threading behavior with a wrapper API. Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx3:${blueprint_version}\" Usage \u00b6 SchedulerProvider has 3 properties, representing the common groups of threading use cases in an app: io: Scheduler - Scheduler for IO-bound work computation: Scheduler - Scheduler for computational work ui: Scheduler - Scheduler for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of SchedulerProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: SchedulerProvider ( io = Schedulers . io (), computation = Schedulers . computation (), ui = AndroidSchedulers . mainThread () ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: SchedulerProvider ( io = Schedulers . trampoline (), computation = Schedulers . trampoline (), ui = Schedulers . trampoline () )","title":"Async RxJava 3"},{"location":"blueprint-async-rx3/#blueprint-async-rxjava-3","text":"This library provides a SchedulerProvider class to encapsulate the threading behavior with a wrapper API.","title":"Blueprint Async RxJava 3"},{"location":"blueprint-async-rx3/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-async-rx3:${blueprint_version}\"","title":"Dependency"},{"location":"blueprint-async-rx3/#usage","text":"SchedulerProvider has 3 properties, representing the common groups of threading use cases in an app: io: Scheduler - Scheduler for IO-bound work computation: Scheduler - Scheduler for computational work ui: Scheduler - Scheduler for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of SchedulerProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: SchedulerProvider ( io = Schedulers . io (), computation = Schedulers . computation (), ui = AndroidSchedulers . mainThread () ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: SchedulerProvider ( io = Schedulers . trampoline (), computation = Schedulers . trampoline (), ui = Schedulers . trampoline () )","title":"Usage"},{"location":"blueprint-interactor-coroutines/","text":"Blueprint Interactor Coroutines \u00b6 In Clean Architecture , Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. This library provides building blocks for writing Interactors based on Kotlin Coroutines and Flow . Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-coroutines:${blueprint_version}\" Usage \u00b6 To implement an Interactor we would extend from one of the 2 classes provided: SuspendingInteractor for single-shot tasks FlowInteractor for cold streams Let\u2019s say we need an Interactor for fetching a list of users from API. Since there can only be 1 response (or error), our Interactor should extend from SuspendingInteractor : class FetchUsers ( private val userService : UserService , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : SuspendingInteractor < EmptyParams , List < User >>() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override suspend fun doWork ( params : EmptyParams ): List < User > { userService . fetchUsers () } } To execute this Interactor, call the execute(...) suspend function from a CoroutineScope : viewModelScope . launch { // EmptyParams is a special [InteractorParams] which you can use when the Interactor has no params. val users : List < User > = fetchUsers . execute ( EmptyParams ) } Note that the CoroutineDispatcherProvider in the constructor of the Interactor comes from the blueprint-async-coroutines artifact, which encapsulates the threading behavior with a wrapper API. Now let\u2019s implement another Interactor for updating a user profile. This interactor expects no result and we just need to know the whether it has been completed successfully. So our Interactor should again extend from SuspendingInteractor : class UpdateUserProfile ( private val userService : UserService , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : SuspendingInteractor < UpdateUserProfile . Params , Unit >() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override suspend fun doWork ( params : Params ) { userService . updateUserProfile ( params . userProfile ) } class Params ( internal val userProfile : UserProfile ) : InteractorParams } To execute this Interactor, call the execute(...) suspend function from a CoroutineScope : viewModelScope . launch { // this returns a Unit updateUserProfile . execute ( UpdateUserProfile . Params ( userProfile )) } In a reactive architecture we might want to stream any changes to the users persisted in the database to automatically re-render the UI whenever the user list has changed. In this case it makes sense to extend from the FlowInteractor : class StreamUsers ( private val userRepository : UserRepository , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : FlowInteractor < EmptyParams , List < User >>() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override fun createFlow ( params : Params ): Flow < List < User >> { return userRepository . streamUsers () // this returns a Coroutines Flow . map { users -> users . sortedBy { it . lastName } } } } On the call-side: streamUsers . buildFlow ( EmptyParams ) . onEach { users -> // propagate value of each Flow emission to LiveData<List<User>> usersLiveData . value = users } . catch { Timber . e ( it ) } // launch the collection of the Flow in the [viewModelScope] from \"androidx.lifecycle:lifecycle-viewmodel-ktx\" . launchIn ( viewModelScope ) Please check the Blueprint Coroutines Demo app for more examples of writing and testing Interactors.","title":"Interactor Coroutines"},{"location":"blueprint-interactor-coroutines/#blueprint-interactor-coroutines","text":"In Clean Architecture , Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. This library provides building blocks for writing Interactors based on Kotlin Coroutines and Flow .","title":"Blueprint Interactor Coroutines"},{"location":"blueprint-interactor-coroutines/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-coroutines:${blueprint_version}\"","title":"Dependency"},{"location":"blueprint-interactor-coroutines/#usage","text":"To implement an Interactor we would extend from one of the 2 classes provided: SuspendingInteractor for single-shot tasks FlowInteractor for cold streams Let\u2019s say we need an Interactor for fetching a list of users from API. Since there can only be 1 response (or error), our Interactor should extend from SuspendingInteractor : class FetchUsers ( private val userService : UserService , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : SuspendingInteractor < EmptyParams , List < User >>() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override suspend fun doWork ( params : EmptyParams ): List < User > { userService . fetchUsers () } } To execute this Interactor, call the execute(...) suspend function from a CoroutineScope : viewModelScope . launch { // EmptyParams is a special [InteractorParams] which you can use when the Interactor has no params. val users : List < User > = fetchUsers . execute ( EmptyParams ) } Note that the CoroutineDispatcherProvider in the constructor of the Interactor comes from the blueprint-async-coroutines artifact, which encapsulates the threading behavior with a wrapper API. Now let\u2019s implement another Interactor for updating a user profile. This interactor expects no result and we just need to know the whether it has been completed successfully. So our Interactor should again extend from SuspendingInteractor : class UpdateUserProfile ( private val userService : UserService , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : SuspendingInteractor < UpdateUserProfile . Params , Unit >() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override suspend fun doWork ( params : Params ) { userService . updateUserProfile ( params . userProfile ) } class Params ( internal val userProfile : UserProfile ) : InteractorParams } To execute this Interactor, call the execute(...) suspend function from a CoroutineScope : viewModelScope . launch { // this returns a Unit updateUserProfile . execute ( UpdateUserProfile . Params ( userProfile )) } In a reactive architecture we might want to stream any changes to the users persisted in the database to automatically re-render the UI whenever the user list has changed. In this case it makes sense to extend from the FlowInteractor : class StreamUsers ( private val userRepository : UserRepository , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : FlowInteractor < EmptyParams , List < User >>() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override fun createFlow ( params : Params ): Flow < List < User >> { return userRepository . streamUsers () // this returns a Coroutines Flow . map { users -> users . sortedBy { it . lastName } } } } On the call-side: streamUsers . buildFlow ( EmptyParams ) . onEach { users -> // propagate value of each Flow emission to LiveData<List<User>> usersLiveData . value = users } . catch { Timber . e ( it ) } // launch the collection of the Flow in the [viewModelScope] from \"androidx.lifecycle:lifecycle-viewmodel-ktx\" . launchIn ( viewModelScope ) Please check the Blueprint Coroutines Demo app for more examples of writing and testing Interactors.","title":"Usage"},{"location":"blueprint-interactor-rx2/","text":"Blueprint Interactor RxJava 2 \u00b6 In Clean Architecture , Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. This library provides building blocks for writing Interactors based on RxJava 2 . Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx2:${blueprint_version}\" Usage \u00b6 To implement an Interactor we would extend from one of the 3 classes provided: SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Let\u2019s say we need an Interactor for fetching a list of users from API. Since there can only be 1 response (or error), our Interactor should extend from SingleInteractor : class FetchUsers ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : SingleInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : EmptyParams ): Single < List < User >> { return userService . fetchUsers () // this returns a Single } } To execute this Interactor, build the Single and subscribe to it: disposable += fetchUsers . buildSingle ( EmptyParams ) . subscribeBy ( onSuccess = { users -> // process result }, onError = { Timber . e ( it ) } ) Note that the SchedulerProvider in the constructor of the Interactor comes from the blueprint-async-rx2 artifact, which encapsulates the threading behavior with a wrapper API. Now let\u2019s implement another Interactor for updating a user profile. This interactor expects no result and we just need to know the whether it has been completed successfully. So our Interactor should extend from CompletableInteractor : class UpdateUserProfile ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : CompletableInteractor < UpdateUserProfile . Params >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Completable { return userService . updateUserProfile ( params . userProfile ) } class Params ( internal val userProfile : UserProfile ) : InteractorParams } To execute this Interactor, build the Completable and subscribe to it: disposable += updateUserProfile . buildCompletable ( UpdateUserProfile . Params ( userProfile )). subscribeBy ( onComplete = { Timber . d ( \"Profile updated.\" ) }, onError = { Timber . e ( it ) } ) In a reactive architecture we might want to stream any changes to the users persisted in the database to automatically re-render the UI whenever the user list has changed. In this case it makes sense to extend from the ObservableInteractor : class StreamUsers ( private val userRepository : UserRepository , schedulerProvider : SchedulerProvider ) : ObservableInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Observable < List < User >> { return userRepository . streamUsers () . map { users -> users . sortedBy { it . lastName } } } } On the call-side: disposable += streamUsers . buildObservable ( EmptyParams ) . subscribeBy ( onNext = { users -> // propagate value of each Observable emission to LiveData<List<User>> usersLiveData . value = users }, onError = { Timber . e ( it ) } ) Please check the Blueprint RxJava Demo app for more examples of writing and testing Interactors.","title":"Interactor RxJava 2"},{"location":"blueprint-interactor-rx2/#blueprint-interactor-rxjava-2","text":"In Clean Architecture , Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. This library provides building blocks for writing Interactors based on RxJava 2 .","title":"Blueprint Interactor RxJava 2"},{"location":"blueprint-interactor-rx2/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx2:${blueprint_version}\"","title":"Dependency"},{"location":"blueprint-interactor-rx2/#usage","text":"To implement an Interactor we would extend from one of the 3 classes provided: SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Let\u2019s say we need an Interactor for fetching a list of users from API. Since there can only be 1 response (or error), our Interactor should extend from SingleInteractor : class FetchUsers ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : SingleInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : EmptyParams ): Single < List < User >> { return userService . fetchUsers () // this returns a Single } } To execute this Interactor, build the Single and subscribe to it: disposable += fetchUsers . buildSingle ( EmptyParams ) . subscribeBy ( onSuccess = { users -> // process result }, onError = { Timber . e ( it ) } ) Note that the SchedulerProvider in the constructor of the Interactor comes from the blueprint-async-rx2 artifact, which encapsulates the threading behavior with a wrapper API. Now let\u2019s implement another Interactor for updating a user profile. This interactor expects no result and we just need to know the whether it has been completed successfully. So our Interactor should extend from CompletableInteractor : class UpdateUserProfile ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : CompletableInteractor < UpdateUserProfile . Params >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Completable { return userService . updateUserProfile ( params . userProfile ) } class Params ( internal val userProfile : UserProfile ) : InteractorParams } To execute this Interactor, build the Completable and subscribe to it: disposable += updateUserProfile . buildCompletable ( UpdateUserProfile . Params ( userProfile )). subscribeBy ( onComplete = { Timber . d ( \"Profile updated.\" ) }, onError = { Timber . e ( it ) } ) In a reactive architecture we might want to stream any changes to the users persisted in the database to automatically re-render the UI whenever the user list has changed. In this case it makes sense to extend from the ObservableInteractor : class StreamUsers ( private val userRepository : UserRepository , schedulerProvider : SchedulerProvider ) : ObservableInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Observable < List < User >> { return userRepository . streamUsers () . map { users -> users . sortedBy { it . lastName } } } } On the call-side: disposable += streamUsers . buildObservable ( EmptyParams ) . subscribeBy ( onNext = { users -> // propagate value of each Observable emission to LiveData<List<User>> usersLiveData . value = users }, onError = { Timber . e ( it ) } ) Please check the Blueprint RxJava Demo app for more examples of writing and testing Interactors.","title":"Usage"},{"location":"blueprint-interactor-rx3/","text":"Blueprint Interactor RxJava 3 \u00b6 In Clean Architecture , Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. This library provides building blocks for writing Interactors based on RxJava 3 . Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx3:${blueprint_version}\" Usage \u00b6 To implement an Interactor we would extend from one of the 3 classes provided: SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Let\u2019s say we need an Interactor for fetching a list of users from API. Since there can only be 1 response (or error), our Interactor should extend from SingleInteractor : class FetchUsers ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : SingleInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : EmptyParams ): Single < List < User >> { return userService . fetchUsers () // this returns a Single } } To execute this Interactor, build the Single and subscribe to it: disposable += fetchUsers . buildSingle ( EmptyParams ) . subscribeBy ( onSuccess = { users -> // process result }, onError = { Timber . e ( it ) } ) Note that the SchedulerProvider in the constructor of the Interactor comes from the blueprint-async-rx3 artifact, which encapsulates the threading behavior with a wrapper API. Now let\u2019s implement another Interactor for updating a user profile. This interactor expects no result and we just need to know the whether it has been completed successfully. So our Interactor should extend from CompletableInteractor : class UpdateUserProfile ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : CompletableInteractor < UpdateUserProfile . Params >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Completable { return userService . updateUserProfile ( params . userProfile ) } class Params ( internal val userProfile : UserProfile ) : InteractorParams } To execute this Interactor, build the Completable and subscribe to it: disposable += updateUserProfile . buildCompletable ( UpdateUserProfile . Params ( userProfile )). subscribeBy ( onComplete = { Timber . d ( \"Profile updated.\" ) }, onError = { Timber . e ( it ) } ) In a reactive architecture we might want to stream any changes to the users persisted in the database to automatically re-render the UI whenever the user list has changed. In this case it makes sense to extend from the ObservableInteractor : class StreamUsers ( private val userRepository : UserRepository , schedulerProvider : SchedulerProvider ) : ObservableInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Observable < List < User >> { return userRepository . streamUsers () . map { users -> users . sortedBy { it . lastName } } } } On the call-side: disposable += streamUsers . buildObservable ( EmptyParams ) . subscribeBy ( onNext = { users -> // propagate value of each Observable emission to LiveData<List<User>> usersLiveData . value = users }, onError = { Timber . e ( it ) } ) Please check the Blueprint RxJava Demo app for more examples of writing and testing Interactors.","title":"Interactor RxJava 3"},{"location":"blueprint-interactor-rx3/#blueprint-interactor-rxjava-3","text":"In Clean Architecture , Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. This library provides building blocks for writing Interactors based on RxJava 3 .","title":"Blueprint Interactor RxJava 3"},{"location":"blueprint-interactor-rx3/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-interactor-rx3:${blueprint_version}\"","title":"Dependency"},{"location":"blueprint-interactor-rx3/#usage","text":"To implement an Interactor we would extend from one of the 3 classes provided: SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams Let\u2019s say we need an Interactor for fetching a list of users from API. Since there can only be 1 response (or error), our Interactor should extend from SingleInteractor : class FetchUsers ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : SingleInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : EmptyParams ): Single < List < User >> { return userService . fetchUsers () // this returns a Single } } To execute this Interactor, build the Single and subscribe to it: disposable += fetchUsers . buildSingle ( EmptyParams ) . subscribeBy ( onSuccess = { users -> // process result }, onError = { Timber . e ( it ) } ) Note that the SchedulerProvider in the constructor of the Interactor comes from the blueprint-async-rx3 artifact, which encapsulates the threading behavior with a wrapper API. Now let\u2019s implement another Interactor for updating a user profile. This interactor expects no result and we just need to know the whether it has been completed successfully. So our Interactor should extend from CompletableInteractor : class UpdateUserProfile ( private val userService : UserService , schedulerProvider : SchedulerProvider ) : CompletableInteractor < UpdateUserProfile . Params >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Completable { return userService . updateUserProfile ( params . userProfile ) } class Params ( internal val userProfile : UserProfile ) : InteractorParams } To execute this Interactor, build the Completable and subscribe to it: disposable += updateUserProfile . buildCompletable ( UpdateUserProfile . Params ( userProfile )). subscribeBy ( onComplete = { Timber . d ( \"Profile updated.\" ) }, onError = { Timber . e ( it ) } ) In a reactive architecture we might want to stream any changes to the users persisted in the database to automatically re-render the UI whenever the user list has changed. In this case it makes sense to extend from the ObservableInteractor : class StreamUsers ( private val userRepository : UserRepository , schedulerProvider : SchedulerProvider ) : ObservableInteractor < EmptyParams , List < User >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Observable < List < User >> { return userRepository . streamUsers () . map { users -> users . sortedBy { it . lastName } } } } On the call-side: disposable += streamUsers . buildObservable ( EmptyParams ) . subscribeBy ( onNext = { users -> // propagate value of each Observable emission to LiveData<List<User>> usersLiveData . value = users }, onError = { Timber . e ( it ) } ) Please check the Blueprint RxJava Demo app for more examples of writing and testing Interactors.","title":"Usage"},{"location":"blueprint-testing-robot/","text":"Blueprint Testing Robot \u00b6 Inspired by the Robot pattern , the Blueprint Testing Robot provides a UI testing framework for authoring structured, readable, and framework-agnostic UI tests. Powered by Kotlin\u2019s higher-order functions, Blueprint Testing Robot has a comprehensive set of common view actions and assertions built-in. Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\" Usage \u00b6 Internally Blueprint Testing Robot uses Espresso to perform view actions and assertions on platform UI widgets as well as the Material components , but the consumers are not aware of the Espresso framework or the Android UI toolkit / Material Components. To write UI tests for a screen, you need: A Screen Robot responsible for driving the screen being tested, providing DSL specific to the screen. The tests themselves which use the DSL provided by the Screen Robot . A test may look like this: @Test fun clickIncrementButton_counterUpdated () { counterScreen { given { // make sure counter is reset resetCounter () } perform { // launch Activity launchActivityScenario < CounterActivity >() // increment the counter clickIncrementButton () } check { // assert that counter has been updated counterDisplayed ( expectedValue = 1 ) } } } The counterScreen block is a top-level function that you implement in your robot, which we\u2019ll look at in a minute. The given , perform , check blocks are provided by our framework to help you structure your test similar to the Given-When-Then style in BDD . The given block is used for setting up any pre-conditions required for the test. This can be omitted if your test does not depend on any data that can survive beyond the execution of a single test. When you are in the perform block, you have access to common view actions such as clickView(@IdRes viewId: Int) . Similarly when you are in the check block, you have access to common view assertions such as viewDisplayed(@IdRes vararg viewIds: Int) . However you\u2019re encouraged to write your custom actions and assertions which are specific to the screen you are testing. The clickIncrementButton() and counterDisplayed(expectedValue = 1) in the example above are custom action and assertion respectively. To implement a Robot for the test above, create a file named CounterRobot.kt : fun counterScreen ( block : CounterRobot .() -> Unit ) = CounterRobot (). apply { block () } class CounterRobot : ScreenRobot < CounterRobotActions , CounterRobotAssertions >( CounterRobotActions (), CounterRobotAssertions () ) class CounterRobotActions : RobotActions { fun clickSaveButton () { clickView ( R . id . button_increment ) } } class CounterRobotAssertions : RobotAssertions { fun counterDisplayed ( expectedValue : Int ) { viewHasText ( R . id . text_view_counter , \"$expectedValue\" ) } } Please check the sample apps for more examples of writing Robots and tests. Building Custom Robot Actions and Robot Assertions \u00b6 If the built-in Robot Actions and Robot Assertions are not sufficient, you can easily roll your own by implementing Kotlin extension functions on the RobotActions or RobotAssertions interface. For example to implement a double tap view action, define the following extension function in your androidTest source: import androidx.annotation.IdRes import androidx.test.espresso.Espresso import androidx.test.espresso.action.ViewActions import androidx.test.espresso.matcher.ViewMatchers import reactivecircus.blueprint.testing.RobotActions fun RobotActions . doubleClickView ( @IdRes viewId : Int ) { Espresso . onView ( ViewMatchers . withId ( viewId )). perform ( ViewActions . doubleClick ()) } Now in your robot you\u2019ll have access to this view action: class ImageGalleryRobotActions : RobotActions { fun zoomIn () { doubleClickView ( R . id . image_view_photo ) } }","title":"Testing Robot"},{"location":"blueprint-testing-robot/#blueprint-testing-robot","text":"Inspired by the Robot pattern , the Blueprint Testing Robot provides a UI testing framework for authoring structured, readable, and framework-agnostic UI tests. Powered by Kotlin\u2019s higher-order functions, Blueprint Testing Robot has a comprehensive set of common view actions and assertions built-in.","title":"Blueprint Testing Robot"},{"location":"blueprint-testing-robot/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-testing-robot:${blueprint_version}\"","title":"Dependency"},{"location":"blueprint-testing-robot/#usage","text":"Internally Blueprint Testing Robot uses Espresso to perform view actions and assertions on platform UI widgets as well as the Material components , but the consumers are not aware of the Espresso framework or the Android UI toolkit / Material Components. To write UI tests for a screen, you need: A Screen Robot responsible for driving the screen being tested, providing DSL specific to the screen. The tests themselves which use the DSL provided by the Screen Robot . A test may look like this: @Test fun clickIncrementButton_counterUpdated () { counterScreen { given { // make sure counter is reset resetCounter () } perform { // launch Activity launchActivityScenario < CounterActivity >() // increment the counter clickIncrementButton () } check { // assert that counter has been updated counterDisplayed ( expectedValue = 1 ) } } } The counterScreen block is a top-level function that you implement in your robot, which we\u2019ll look at in a minute. The given , perform , check blocks are provided by our framework to help you structure your test similar to the Given-When-Then style in BDD . The given block is used for setting up any pre-conditions required for the test. This can be omitted if your test does not depend on any data that can survive beyond the execution of a single test. When you are in the perform block, you have access to common view actions such as clickView(@IdRes viewId: Int) . Similarly when you are in the check block, you have access to common view assertions such as viewDisplayed(@IdRes vararg viewIds: Int) . However you\u2019re encouraged to write your custom actions and assertions which are specific to the screen you are testing. The clickIncrementButton() and counterDisplayed(expectedValue = 1) in the example above are custom action and assertion respectively. To implement a Robot for the test above, create a file named CounterRobot.kt : fun counterScreen ( block : CounterRobot .() -> Unit ) = CounterRobot (). apply { block () } class CounterRobot : ScreenRobot < CounterRobotActions , CounterRobotAssertions >( CounterRobotActions (), CounterRobotAssertions () ) class CounterRobotActions : RobotActions { fun clickSaveButton () { clickView ( R . id . button_increment ) } } class CounterRobotAssertions : RobotAssertions { fun counterDisplayed ( expectedValue : Int ) { viewHasText ( R . id . text_view_counter , \"$expectedValue\" ) } } Please check the sample apps for more examples of writing Robots and tests.","title":"Usage"},{"location":"blueprint-testing-robot/#building-custom-robot-actions-and-robot-assertions","text":"If the built-in Robot Actions and Robot Assertions are not sufficient, you can easily roll your own by implementing Kotlin extension functions on the RobotActions or RobotAssertions interface. For example to implement a double tap view action, define the following extension function in your androidTest source: import androidx.annotation.IdRes import androidx.test.espresso.Espresso import androidx.test.espresso.action.ViewActions import androidx.test.espresso.matcher.ViewMatchers import reactivecircus.blueprint.testing.RobotActions fun RobotActions . doubleClickView ( @IdRes viewId : Int ) { Espresso . onView ( ViewMatchers . withId ( viewId )). perform ( ViewActions . doubleClick ()) } Now in your robot you\u2019ll have access to this view action: class ImageGalleryRobotActions : RobotActions { fun zoomIn () { doubleClickView ( R . id . image_view_photo ) } }","title":"Building Custom Robot Actions and Robot Assertions"},{"location":"blueprint-ui/","text":"Blueprint UI \u00b6 The Blueprint UI provides a number of convenient Kotlin extensions and widgets for working with the Android UI toolkit. Dependency \u00b6 implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" Note that the library uses androidx.appcompat:appcompat transitively. Extensions \u00b6 Kotlin extensions on Activity : /** * Programmatically close soft keyboard. */ fun Activity . hideKeyboard ( focusedView : View ) /** * Programmatically show soft keyboard. */ fun Activity . showKeyboard () /** * Shows status bar on the activity. */ fun Activity . showStatusBar () /** * Hides status bar from the activity. */ fun Activity . hideStatusBar () /** * Sets status bar color on the activity and optionally draws the status bar system ui in light or dark mode. */ fun Activity . setStatusBarColor ( @ColorRes colorRes : Int , lightBackground : Boolean = false ) /** * Returns screen size of the activity. */ val Activity . screenSize : DisplayMetrics Kotlin extensions on Context : /** * Apply tinting to a vector drawable. */ fun Context . tintVectorDrawable ( theme : Resources . Theme , @DrawableRes resId : Int , @ColorInt tint : Int ): Drawable /** * Resolves the given color attribute and returns the resource ID associated with the color. */ @ColorInt fun Context . resolveColorAttr ( @AttrRes colorAttr : Int ): Int /** * Whether animation is turned on on the device. */ val Context . isAnimationOn : Boolean Kotlin extensions on AppCompat : /** * Sets the precomputed text future on the [AppCompatTextView]. * * @param charSequence the text to be displayed * @param executor the executor to be used for processing the text layout. * Default single threaded pool will be used if null is passed in. */ fun AppCompatTextView . setPrecomputedTextFuture ( charSequence : CharSequence , executor : Executor ? = null ) Intent.kt has extensions on Activity and Context for launching new activity. For example to launch a new Activity from an Activity: launchActivity < NoteActivity > { putExtra ( EXTRA_ENTER_NOTE_ID , 1 ) } To launch a new Activity, passing in a request code : launchActivity < ScanQrCodeActivity >( requestCode = SCAN_QR_CODE_REQUEST ) This internally launches the activity with Activity.startActivityForResult(...) .","title":"UI"},{"location":"blueprint-ui/#blueprint-ui","text":"The Blueprint UI provides a number of convenient Kotlin extensions and widgets for working with the Android UI toolkit.","title":"Blueprint UI"},{"location":"blueprint-ui/#dependency","text":"implementation \"io.github.reactivecircus.blueprint:blueprint-ui:${blueprint_version}\" Note that the library uses androidx.appcompat:appcompat transitively.","title":"Dependency"},{"location":"blueprint-ui/#extensions","text":"Kotlin extensions on Activity : /** * Programmatically close soft keyboard. */ fun Activity . hideKeyboard ( focusedView : View ) /** * Programmatically show soft keyboard. */ fun Activity . showKeyboard () /** * Shows status bar on the activity. */ fun Activity . showStatusBar () /** * Hides status bar from the activity. */ fun Activity . hideStatusBar () /** * Sets status bar color on the activity and optionally draws the status bar system ui in light or dark mode. */ fun Activity . setStatusBarColor ( @ColorRes colorRes : Int , lightBackground : Boolean = false ) /** * Returns screen size of the activity. */ val Activity . screenSize : DisplayMetrics Kotlin extensions on Context : /** * Apply tinting to a vector drawable. */ fun Context . tintVectorDrawable ( theme : Resources . Theme , @DrawableRes resId : Int , @ColorInt tint : Int ): Drawable /** * Resolves the given color attribute and returns the resource ID associated with the color. */ @ColorInt fun Context . resolveColorAttr ( @AttrRes colorAttr : Int ): Int /** * Whether animation is turned on on the device. */ val Context . isAnimationOn : Boolean Kotlin extensions on AppCompat : /** * Sets the precomputed text future on the [AppCompatTextView]. * * @param charSequence the text to be displayed * @param executor the executor to be used for processing the text layout. * Default single threaded pool will be used if null is passed in. */ fun AppCompatTextView . setPrecomputedTextFuture ( charSequence : CharSequence , executor : Executor ? = null ) Intent.kt has extensions on Activity and Context for launching new activity. For example to launch a new Activity from an Activity: launchActivity < NoteActivity > { putExtra ( EXTRA_ENTER_NOTE_ID , 1 ) } To launch a new Activity, passing in a request code : launchActivity < ScanQrCodeActivity >( requestCode = SCAN_QR_CODE_REQUEST ) This internally launches the activity with Activity.startActivityForResult(...) .","title":"Extensions"},{"location":"samples/","text":"Blueprint Samples \u00b6 These samples showcase how you may integrate Blueprint in your project by implementing a simple note taking app. There are 2 flavors of the demo app: demo-coroutines - powered by Kotlin Coroutines and Flow and various Blueprint libraries. demo-rx - powered by RxJava 3 and various Blueprint libraries. Dependencies \u00b6 Since the 2 demo apps have identical functionality, we are able to share a lot of common code between the apps by having a couple of common library modules. demo-coroutines \u00b6 This app module uses the following Blueprint libraries: blueprint-interactor-coroutines blueprint-async-coroutines blueprint-ui blueprint-testing-robot It also depends on the demo-common and demo-testing-common modules. demo-rx \u00b6 This app module uses the following Blueprint libraries: blueprint-interactor-rx3 blueprint-async-rx3 blueprint-ui blueprint-testing-robot It also depends on the demo-common and demo-testing-common modules. demo-common \u00b6 This library module includes common code shared between the 2 apps such as resources, layouts, and in-memory cache. demo-testing-common \u00b6 This library module includes common UI testing infra code shared between the 2 apps such as instrumentation robots and test data. Comparison \u00b6 The demo apps follow Clean Architecture , but the only part relevant to Blueprint is the domain layer which contains Use Cases (also known as Interactors) . One of the key differences between the Coroutines-based and RxJava-based implementations is how Interactors are implemented: The Coroutines-based implementation uses SuspendingInteractor for single-shot tasks and FlowInteractor for cold streams. The RxJava-based implementation uses SingleInteractor and CompletableInteractor for single-shot tasks and ObservableInteractor for cold streams. Single-shot Task Cold Stream blueprint-interactor-coroutines SuspendingInteractor FlowInteractor blueprint-interactor-rx3 SingleInteractor , CompletableInteractor ObservableInteractor Consequently the 2 different Interactor implementations expose different async primitives to downstream: Coroutines-based Interactors - expose suspend function and Kotlin Flow to consumers. RxJava-based Interactors - expose RxJava Single , Completable and Observable to consumers. Another difference is the wrapper APIs for encapsulated threading behavior : The Coroutines-based implementation uses CoroutineDispatcherProvider from the blueprint-async-coroutines library. The RxJava-based implementation uses SchedulerProvider from the blueprint-async-rx3 library. They offer the same abstraction to help with DI and testing, but one interacts with Kotlin\u2019s CoroutineDispatcher API and the other one interacts with RxJava\u2019s Scheduler API. Notes \u00b6 While these samples implement layered-architecture and have comprehensive unit tests and UI tests, they most definitely do not represent how one should approach building a production quality app. A number of important things are left out as our focus here is how the Blueprint libraries can be integrated in your codebase: We implemented a very simple Dependency Injection (Service Locator to be precise) framework. Consider using Dagger or Koin in a real project. Different layers (e.g. domain , data , presentation ) should probably live in their own modules in a real project. Both samples use AndroidX ViewModel in the presentation layer. For better managing complex states you might want to consider using a redux-based architecture that employs Uni-directional Data Flow . I personally recommend RxRedux and its Coroutines-based equivalent. In a real project you will want to set up product flavors for different environments (e.g. mock, staging, production). Obviously the apps don\u2019t talk to any backend APIs and lack persistent storage. For a better representation of a highly-modularized, production-quality app that uses Blueprint , you may want to take a look at ReleaseProbe .","title":"Demos Overview"},{"location":"samples/#blueprint-samples","text":"These samples showcase how you may integrate Blueprint in your project by implementing a simple note taking app. There are 2 flavors of the demo app: demo-coroutines - powered by Kotlin Coroutines and Flow and various Blueprint libraries. demo-rx - powered by RxJava 3 and various Blueprint libraries.","title":"Blueprint Samples"},{"location":"samples/#dependencies","text":"Since the 2 demo apps have identical functionality, we are able to share a lot of common code between the apps by having a couple of common library modules.","title":"Dependencies"},{"location":"samples/#demo-coroutines","text":"This app module uses the following Blueprint libraries: blueprint-interactor-coroutines blueprint-async-coroutines blueprint-ui blueprint-testing-robot It also depends on the demo-common and demo-testing-common modules.","title":"demo-coroutines"},{"location":"samples/#demo-rx","text":"This app module uses the following Blueprint libraries: blueprint-interactor-rx3 blueprint-async-rx3 blueprint-ui blueprint-testing-robot It also depends on the demo-common and demo-testing-common modules.","title":"demo-rx"},{"location":"samples/#demo-common","text":"This library module includes common code shared between the 2 apps such as resources, layouts, and in-memory cache.","title":"demo-common"},{"location":"samples/#demo-testing-common","text":"This library module includes common UI testing infra code shared between the 2 apps such as instrumentation robots and test data.","title":"demo-testing-common"},{"location":"samples/#comparison","text":"The demo apps follow Clean Architecture , but the only part relevant to Blueprint is the domain layer which contains Use Cases (also known as Interactors) . One of the key differences between the Coroutines-based and RxJava-based implementations is how Interactors are implemented: The Coroutines-based implementation uses SuspendingInteractor for single-shot tasks and FlowInteractor for cold streams. The RxJava-based implementation uses SingleInteractor and CompletableInteractor for single-shot tasks and ObservableInteractor for cold streams. Single-shot Task Cold Stream blueprint-interactor-coroutines SuspendingInteractor FlowInteractor blueprint-interactor-rx3 SingleInteractor , CompletableInteractor ObservableInteractor Consequently the 2 different Interactor implementations expose different async primitives to downstream: Coroutines-based Interactors - expose suspend function and Kotlin Flow to consumers. RxJava-based Interactors - expose RxJava Single , Completable and Observable to consumers. Another difference is the wrapper APIs for encapsulated threading behavior : The Coroutines-based implementation uses CoroutineDispatcherProvider from the blueprint-async-coroutines library. The RxJava-based implementation uses SchedulerProvider from the blueprint-async-rx3 library. They offer the same abstraction to help with DI and testing, but one interacts with Kotlin\u2019s CoroutineDispatcher API and the other one interacts with RxJava\u2019s Scheduler API.","title":"Comparison"},{"location":"samples/#notes","text":"While these samples implement layered-architecture and have comprehensive unit tests and UI tests, they most definitely do not represent how one should approach building a production quality app. A number of important things are left out as our focus here is how the Blueprint libraries can be integrated in your codebase: We implemented a very simple Dependency Injection (Service Locator to be precise) framework. Consider using Dagger or Koin in a real project. Different layers (e.g. domain , data , presentation ) should probably live in their own modules in a real project. Both samples use AndroidX ViewModel in the presentation layer. For better managing complex states you might want to consider using a redux-based architecture that employs Uni-directional Data Flow . I personally recommend RxRedux and its Coroutines-based equivalent. In a real project you will want to set up product flavors for different environments (e.g. mock, staging, production). Obviously the apps don\u2019t talk to any backend APIs and lack persistent storage. For a better representation of a highly-modularized, production-quality app that uses Blueprint , you may want to take a look at ReleaseProbe .","title":"Notes"},{"location":"samples/demo-common/","text":"Blueprint Demo Common \u00b6 This is a library module shared by both demo-coroutines and demo-rx . This has nothing to do with Blueprint and just provides common code used by both apps: Resources An in-memory cache Domain model A couple of utils and extensions","title":"Demo Shared Library"},{"location":"samples/demo-common/#blueprint-demo-common","text":"This is a library module shared by both demo-coroutines and demo-rx . This has nothing to do with Blueprint and just provides common code used by both apps: Resources An in-memory cache Domain model A couple of utils and extensions","title":"Blueprint Demo Common"},{"location":"samples/demo-coroutines/","text":"Blueprint Coroutines Demo \u00b6 This is simple note taking app for demonstrating how to use Blueprint in a codebase that uses Kotlin Coroutines and Flow . Interactors \u00b6 The demo app follows Clean Architecture . The Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. The blueprint-interactor-coroutines artifact provides 2 base classes for building Interactors: SuspendingInteractor for single-shot tasks FlowInteractor for cold streams An example implementation of SuspendingInteractor in the app: class CoroutinesCreateNote ( private val noteRepository : CoroutinesNoteRepository , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : SuspendingInteractor < CoroutinesCreateNote . Params , Unit >() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override suspend fun doWork ( params : Params ) { noteRepository . addNote ( params . note ) } class Params ( internal val note : Note ) : InteractorParams } Call-side: viewModelScope . launch { val time = System . currentTimeMillis () val newNote = Note ( content = content , timeCreated = time , timeLastUpdated = time ) createNote . execute ( CoroutinesCreateNote . Params ( newNote )) } An example implementation of FlowInteractor in the app: class CoroutinesStreamAllNotes ( private val noteRepository : CoroutinesNoteRepository , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : FlowInteractor < CoroutinesStreamAllNotes . Params , List < Note >>() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override fun createFlow ( params : Params ): Flow < List < Note >> { return noteRepository . streamAllNotes () . map { notes -> if ( params . sortedBy === SortedBy . TIME_CREATED ) { notes . sortedByDescending { it . timeCreated } } else { notes . sortedByDescending { it . timeLastUpdated } } } } class Params ( internal val sortedBy : SortedBy ) : InteractorParams enum class SortedBy { TIME_CREATED , TIME_LAST_UPDATED } } Call-side: streamAllNotes . buildFlow ( CoroutinesStreamAllNotes . Params ( CoroutinesStreamAllNotes . SortedBy . TIME_LAST_UPDATED )) . map { State . Idle ( it ) } . onStart < State > { emit ( State . LoadingNotes ) } . onEach { // propagate value of each Flow emission to LiveData<State> notesLiveData . value = it } . catch { Timber . e ( it ) } // launch the collection of the Flow in the [viewModelScope] from \"androidx.lifecycle:lifecycle-viewmodel-ktx\" . launchIn ( viewModelScope ) Threading \u00b6 The CoroutineDispatcherProvider from the examples above is responsible encapsulating the threading behavior with a wrapper API. This class from the blueprint-async-coroutines artifact has 3 properties, representing the common groups of threading use cases in an app: io: CoroutineDispatcher - Dispatcher for IO-bound work computation: CoroutineDispatcher - Dispatcher for computational work ui: CoroutineDispatcher - Dispatcher for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of CoroutineDispatcherProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: CoroutineDispatcherProvider ( io = Dispatchers . IO , computation = Dispatchers . Default , ui = Dispatchers . Main . immediate ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: CoroutineDispatcherProvider ( io = testCoroutineDispatcher , computation = testCoroutineDispatcher , ui = testCoroutineDispatcher ) where testCoroutineDispatcher is an instance of TestCoroutineDispatcher from the org.jetbrains.kotlinx:kotlinx-coroutines-test library. For a full example please look at the unit tests for Interactors e.g. CoroutinesStreamAllNotesTest.kt . UI Widget and Extensions \u00b6 The demo app uses various Kotlin extensions and widget from the blueprint-ui artifact: For launching a new Activity from an Activity: launchActivity < CoroutinesEnterNoteActivity > { putExtra ( EXTRA_ENTER_NOTE_PARAMS , EnterNoteParams . CreateNew ) } UI Testing \u00b6 The UI testing framework and Testing Robot DSL from the blueprint-testing-robot provide the building blocks for authoring structured, readable, and framework-agnostic UI tests. An example of a test case: @Test fun openNotesListScreenWithExistingNotes_notesDisplayed () { notesListScreen { given { noteCache . addNotes ( testNotes ) } perform { launchActivityScenario < CoroutinesNotesListActivity >() } check { createNoteButtonDisplayed () notesDisplayed ( testNotes ) } } } This DSL is powered by a custom Screen Robot implementation. Examples can be found in demo-testing-common . Building \u00b6 To compile the app: ./gradlew demo-coroutines:assemble To run unit tests, lint and detekt: ./gradlew demo-coroutines:check To run UI (on-device) tests: ./gradlew demo-coroutines:connectedCheck","title":"Coroutines Demo"},{"location":"samples/demo-coroutines/#blueprint-coroutines-demo","text":"This is simple note taking app for demonstrating how to use Blueprint in a codebase that uses Kotlin Coroutines and Flow .","title":"Blueprint Coroutines Demo"},{"location":"samples/demo-coroutines/#interactors","text":"The demo app follows Clean Architecture . The Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. The blueprint-interactor-coroutines artifact provides 2 base classes for building Interactors: SuspendingInteractor for single-shot tasks FlowInteractor for cold streams An example implementation of SuspendingInteractor in the app: class CoroutinesCreateNote ( private val noteRepository : CoroutinesNoteRepository , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : SuspendingInteractor < CoroutinesCreateNote . Params , Unit >() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override suspend fun doWork ( params : Params ) { noteRepository . addNote ( params . note ) } class Params ( internal val note : Note ) : InteractorParams } Call-side: viewModelScope . launch { val time = System . currentTimeMillis () val newNote = Note ( content = content , timeCreated = time , timeLastUpdated = time ) createNote . execute ( CoroutinesCreateNote . Params ( newNote )) } An example implementation of FlowInteractor in the app: class CoroutinesStreamAllNotes ( private val noteRepository : CoroutinesNoteRepository , coroutineDispatcherProvider : CoroutineDispatcherProvider ) : FlowInteractor < CoroutinesStreamAllNotes . Params , List < Note >>() { override val dispatcher : CoroutineDispatcher = coroutineDispatcherProvider . io override fun createFlow ( params : Params ): Flow < List < Note >> { return noteRepository . streamAllNotes () . map { notes -> if ( params . sortedBy === SortedBy . TIME_CREATED ) { notes . sortedByDescending { it . timeCreated } } else { notes . sortedByDescending { it . timeLastUpdated } } } } class Params ( internal val sortedBy : SortedBy ) : InteractorParams enum class SortedBy { TIME_CREATED , TIME_LAST_UPDATED } } Call-side: streamAllNotes . buildFlow ( CoroutinesStreamAllNotes . Params ( CoroutinesStreamAllNotes . SortedBy . TIME_LAST_UPDATED )) . map { State . Idle ( it ) } . onStart < State > { emit ( State . LoadingNotes ) } . onEach { // propagate value of each Flow emission to LiveData<State> notesLiveData . value = it } . catch { Timber . e ( it ) } // launch the collection of the Flow in the [viewModelScope] from \"androidx.lifecycle:lifecycle-viewmodel-ktx\" . launchIn ( viewModelScope )","title":"Interactors"},{"location":"samples/demo-coroutines/#threading","text":"The CoroutineDispatcherProvider from the examples above is responsible encapsulating the threading behavior with a wrapper API. This class from the blueprint-async-coroutines artifact has 3 properties, representing the common groups of threading use cases in an app: io: CoroutineDispatcher - Dispatcher for IO-bound work computation: CoroutineDispatcher - Dispatcher for computational work ui: CoroutineDispatcher - Dispatcher for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of CoroutineDispatcherProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: CoroutineDispatcherProvider ( io = Dispatchers . IO , computation = Dispatchers . Default , ui = Dispatchers . Main . immediate ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: CoroutineDispatcherProvider ( io = testCoroutineDispatcher , computation = testCoroutineDispatcher , ui = testCoroutineDispatcher ) where testCoroutineDispatcher is an instance of TestCoroutineDispatcher from the org.jetbrains.kotlinx:kotlinx-coroutines-test library. For a full example please look at the unit tests for Interactors e.g. CoroutinesStreamAllNotesTest.kt .","title":"Threading"},{"location":"samples/demo-coroutines/#ui-widget-and-extensions","text":"The demo app uses various Kotlin extensions and widget from the blueprint-ui artifact: For launching a new Activity from an Activity: launchActivity < CoroutinesEnterNoteActivity > { putExtra ( EXTRA_ENTER_NOTE_PARAMS , EnterNoteParams . CreateNew ) }","title":"UI Widget and Extensions"},{"location":"samples/demo-coroutines/#ui-testing","text":"The UI testing framework and Testing Robot DSL from the blueprint-testing-robot provide the building blocks for authoring structured, readable, and framework-agnostic UI tests. An example of a test case: @Test fun openNotesListScreenWithExistingNotes_notesDisplayed () { notesListScreen { given { noteCache . addNotes ( testNotes ) } perform { launchActivityScenario < CoroutinesNotesListActivity >() } check { createNoteButtonDisplayed () notesDisplayed ( testNotes ) } } } This DSL is powered by a custom Screen Robot implementation. Examples can be found in demo-testing-common .","title":"UI Testing"},{"location":"samples/demo-coroutines/#building","text":"To compile the app: ./gradlew demo-coroutines:assemble To run unit tests, lint and detekt: ./gradlew demo-coroutines:check To run UI (on-device) tests: ./gradlew demo-coroutines:connectedCheck","title":"Building"},{"location":"samples/demo-rx/","text":"Blueprint RxJava Demo \u00b6 This is simple note taking app for demonstrating how to use Blueprint in a codebase that uses RxJava . Interactors \u00b6 The demo app follows Clean Architecture . The Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. The blueprint-interactor-rx3 artifact provides 3 base classes for building Interactors: SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams An example implementation of SingleInteractor in the app: class RxGetNoteByUuid ( private val noteRepository : RxNoteRepository , schedulerProvider : SchedulerProvider ) : SingleInteractor < RxGetNoteByUuid . Params , Note >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Single < Note > { return noteRepository . getNoteByUuid ( params . uuid ) . switchIfEmpty ( Maybe . error ( IllegalStateException ( \"Could not find note by uuid.\" )) ) . toSingle () } class Params ( internal val uuid : String ) : InteractorParams } Call-side: disposable += getNoteByUuid . buildSingle ( RxGetNoteByUuid . Params ( noteUuid )) . subscribeBy ( onSuccess = { note -> noteLiveData . value = State ( note ) }, onError = { Timber . e ( it ) } ) An example implementation of CompletableInteractor in the app: class RxUpdateNote ( private val noteRepository : RxNoteRepository , schedulerProvider : SchedulerProvider ) : CompletableInteractor < RxUpdateNote . Params >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Completable { return noteRepository . updateNote ( params . note ) } class Params ( internal val note : Note ) : InteractorParams } Call-side: disposable += updateNote . buildCompletable ( RxUpdateNote . Params ( updatedNote )). subscribeBy ( onComplete = { Timber . d ( \"Note updated.\" ) }, onError = { Timber . e ( it ) } ) An example implementation of ObservableInteractor in the app: class RxStreamAllNotes ( private val noteRepository : RxNoteRepository , schedulerProvider : SchedulerProvider ) : ObservableInteractor < RxStreamAllNotes . Params , List < Note >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Observable < List < Note >> { return noteRepository . streamAllNotes () . map { notes -> if ( params . sortedBy === SortedBy . TIME_CREATED ) { notes . sortedByDescending { it . timeCreated } } else { notes . sortedByDescending { it . timeLastUpdated } } } } class Params ( internal val sortedBy : SortedBy ) : InteractorParams enum class SortedBy { TIME_CREATED , TIME_LAST_UPDATED } } Call-side: disposable += streamAllNotes . buildObservable ( RxStreamAllNotes . Params ( RxStreamAllNotes . SortedBy . TIME_LAST_UPDATED ) ) . map < State > { State . Idle ( it ) } . startWith ( State . LoadingNotes ) . subscribeBy ( onNext = { notesLiveData . value = it }, onError = { Timber . e ( it ) } ) Threading \u00b6 The SchedulerProvider from the examples above is responsible encapsulating the threading behavior with a wrapper API. This class from the blueprint-async-rx3 artifact has 3 properties, representing the common groups of threading use cases in an app: io: Scheduler - Scheduler for IO-bound work computation: Scheduler - Scheduler for computational work ui: Scheduler - Scheduler for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of SchedulerProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: SchedulerProvider ( io = Schedulers . io (), computation = Schedulers . computation (), ui = AndroidSchedulers . mainThread () ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: SchedulerProvider ( io = Schedulers . trampoline (), computation = Schedulers . trampoline (), ui = Schedulers . trampoline () ) For a full example please look at the unit tests for Interactors e.g. RxStreamAllNotesTest.kt . UI Widget and Extensions \u00b6 The demo app uses various Kotlin extensions and widget from the blueprint-ui artifact: For launching a new Activity from an Activity: launchActivity < RxEnterNoteActivity > { putExtra ( EXTRA_ENTER_NOTE_PARAMS , EnterNoteParams . CreateNew ) } UI Testing \u00b6 The UI testing framework and Testing Robot DSL from the blueprint-testing-robot provide the building blocks for authoring structured, readable, and framework-agnostic UI tests. An example of a test case: @Test fun openNotesListScreenWithExistingNotes_notesDisplayed () { notesListScreen { given { noteCache . addNotes ( testNotes ) } perform { launchActivityScenario < RxNotesListActivity >() } check { createNoteButtonDisplayed () notesDisplayed ( testNotes ) } } } This DSL is powered by a custom Screen Robot implementation. Examples can be found in demo-testing-common . Building \u00b6 To compile the app: ./gradlew demo-rx:assemble To run unit tests, lint and detekt: ./gradlew demo-rx:check To run UI (on-device) tests: ./gradlew demo-rx:connectedCheck","title":"RxJava Demo"},{"location":"samples/demo-rx/#blueprint-rxjava-demo","text":"This is simple note taking app for demonstrating how to use Blueprint in a codebase that uses RxJava .","title":"Blueprint RxJava Demo"},{"location":"samples/demo-rx/#interactors","text":"The demo app follows Clean Architecture . The Use Cases (also known as Interactors) define and encapsulate business rules specific to the application. The blueprint-interactor-rx3 artifact provides 3 base classes for building Interactors: SingleInteractor for single-shot (with result) tasks CompletableInteractor for single-shot (no result) tasks ObservableInteractor for cold streams An example implementation of SingleInteractor in the app: class RxGetNoteByUuid ( private val noteRepository : RxNoteRepository , schedulerProvider : SchedulerProvider ) : SingleInteractor < RxGetNoteByUuid . Params , Note >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Single < Note > { return noteRepository . getNoteByUuid ( params . uuid ) . switchIfEmpty ( Maybe . error ( IllegalStateException ( \"Could not find note by uuid.\" )) ) . toSingle () } class Params ( internal val uuid : String ) : InteractorParams } Call-side: disposable += getNoteByUuid . buildSingle ( RxGetNoteByUuid . Params ( noteUuid )) . subscribeBy ( onSuccess = { note -> noteLiveData . value = State ( note ) }, onError = { Timber . e ( it ) } ) An example implementation of CompletableInteractor in the app: class RxUpdateNote ( private val noteRepository : RxNoteRepository , schedulerProvider : SchedulerProvider ) : CompletableInteractor < RxUpdateNote . Params >( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Completable { return noteRepository . updateNote ( params . note ) } class Params ( internal val note : Note ) : InteractorParams } Call-side: disposable += updateNote . buildCompletable ( RxUpdateNote . Params ( updatedNote )). subscribeBy ( onComplete = { Timber . d ( \"Note updated.\" ) }, onError = { Timber . e ( it ) } ) An example implementation of ObservableInteractor in the app: class RxStreamAllNotes ( private val noteRepository : RxNoteRepository , schedulerProvider : SchedulerProvider ) : ObservableInteractor < RxStreamAllNotes . Params , List < Note >>( ioScheduler = schedulerProvider . io , uiScheduler = schedulerProvider . ui ) { override fun createInteractor ( params : Params ): Observable < List < Note >> { return noteRepository . streamAllNotes () . map { notes -> if ( params . sortedBy === SortedBy . TIME_CREATED ) { notes . sortedByDescending { it . timeCreated } } else { notes . sortedByDescending { it . timeLastUpdated } } } } class Params ( internal val sortedBy : SortedBy ) : InteractorParams enum class SortedBy { TIME_CREATED , TIME_LAST_UPDATED } } Call-side: disposable += streamAllNotes . buildObservable ( RxStreamAllNotes . Params ( RxStreamAllNotes . SortedBy . TIME_LAST_UPDATED ) ) . map < State > { State . Idle ( it ) } . startWith ( State . LoadingNotes ) . subscribeBy ( onNext = { notesLiveData . value = it }, onError = { Timber . e ( it ) } )","title":"Interactors"},{"location":"samples/demo-rx/#threading","text":"The SchedulerProvider from the examples above is responsible encapsulating the threading behavior with a wrapper API. This class from the blueprint-async-rx3 artifact has 3 properties, representing the common groups of threading use cases in an app: io: Scheduler - Scheduler for IO-bound work computation: Scheduler - Scheduler for computational work ui: Scheduler - Scheduler for UI work An instance of this can be injected to classes which are concerned about executing code on different threads, but they don\u2019t and shouldn\u2019t need to know about the underlying implementation. A single-threaded version for example can be injected for testing. Practically you\u2019ll likely only have 1 instance of SchedulerProvider in the production environment and use DI to inject it into anywhere in the codebase where certain threading behavior is required: SchedulerProvider ( io = Schedulers . io (), computation = Schedulers . computation (), ui = AndroidSchedulers . mainThread () ) In unit tests you can easily swap out the implementation to make sure code is executed in a single thread: SchedulerProvider ( io = Schedulers . trampoline (), computation = Schedulers . trampoline (), ui = Schedulers . trampoline () ) For a full example please look at the unit tests for Interactors e.g. RxStreamAllNotesTest.kt .","title":"Threading"},{"location":"samples/demo-rx/#ui-widget-and-extensions","text":"The demo app uses various Kotlin extensions and widget from the blueprint-ui artifact: For launching a new Activity from an Activity: launchActivity < RxEnterNoteActivity > { putExtra ( EXTRA_ENTER_NOTE_PARAMS , EnterNoteParams . CreateNew ) }","title":"UI Widget and Extensions"},{"location":"samples/demo-rx/#ui-testing","text":"The UI testing framework and Testing Robot DSL from the blueprint-testing-robot provide the building blocks for authoring structured, readable, and framework-agnostic UI tests. An example of a test case: @Test fun openNotesListScreenWithExistingNotes_notesDisplayed () { notesListScreen { given { noteCache . addNotes ( testNotes ) } perform { launchActivityScenario < RxNotesListActivity >() } check { createNoteButtonDisplayed () notesDisplayed ( testNotes ) } } } This DSL is powered by a custom Screen Robot implementation. Examples can be found in demo-testing-common .","title":"UI Testing"},{"location":"samples/demo-rx/#building","text":"To compile the app: ./gradlew demo-rx:assemble To run unit tests, lint and detekt: ./gradlew demo-rx:check To run UI (on-device) tests: ./gradlew demo-rx:connectedCheck","title":"Building"},{"location":"samples/demo-testing-common/","text":"Blueprint Demo Testing Infrastructure \u00b6 This library module has common UI testing infra code shared by the 2 apps, including the screen robots and test data . A Screen Robot implementation uses the predefined view actions, view assertions and Robot DSL from the blueprint-testing-robot artifact to provide a layer of abstraction on top of the more general and primitive instrumentation commands. An example of a Robot implementation: fun enterNoteScreen ( block : EnterNoteRobot .() -> Unit ) = EnterNoteRobot (). apply { block () } class EnterNoteRobot : ScreenRobot < EnterNoteRobotActions , EnterNoteRobotAssertions >( EnterNoteRobotActions (), EnterNoteRobotAssertions () ) class EnterNoteRobotActions : RobotActions { fun enterNote ( note : String ) { replaceTextInView ( R . id . edit_text_note , note ) } fun clickSaveButton () { clickView ( R . id . action_save ) } } class EnterNoteRobotAssertions : RobotAssertions { fun createNoteScreenTitleDisplayed () { toolbarHasTitle ( R . string . title_create_note ) } fun updateNoteScreenTitleDisplayed () { toolbarHasTitle ( R . string . title_update_note ) } fun noteDisplayed ( note : String ) { viewHasText ( R . id . edit_text_note , note ) } } If the built-in robot actions and robot assertions are not sufficient, you can roll your custom actions or assertions directly using Espresso . Have a look at the custom Robot Action example in blueprint-testing-robot .","title":"Demo Testing Infrastructure"},{"location":"samples/demo-testing-common/#blueprint-demo-testing-infrastructure","text":"This library module has common UI testing infra code shared by the 2 apps, including the screen robots and test data . A Screen Robot implementation uses the predefined view actions, view assertions and Robot DSL from the blueprint-testing-robot artifact to provide a layer of abstraction on top of the more general and primitive instrumentation commands. An example of a Robot implementation: fun enterNoteScreen ( block : EnterNoteRobot .() -> Unit ) = EnterNoteRobot (). apply { block () } class EnterNoteRobot : ScreenRobot < EnterNoteRobotActions , EnterNoteRobotAssertions >( EnterNoteRobotActions (), EnterNoteRobotAssertions () ) class EnterNoteRobotActions : RobotActions { fun enterNote ( note : String ) { replaceTextInView ( R . id . edit_text_note , note ) } fun clickSaveButton () { clickView ( R . id . action_save ) } } class EnterNoteRobotAssertions : RobotAssertions { fun createNoteScreenTitleDisplayed () { toolbarHasTitle ( R . string . title_create_note ) } fun updateNoteScreenTitleDisplayed () { toolbarHasTitle ( R . string . title_update_note ) } fun noteDisplayed ( note : String ) { viewHasText ( R . id . edit_text_note , note ) } } If the built-in robot actions and robot assertions are not sufficient, you can roll your custom actions or assertions directly using Espresso . Have a look at the custom Robot Action example in blueprint-testing-robot .","title":"Blueprint Demo Testing Infrastructure"}]}