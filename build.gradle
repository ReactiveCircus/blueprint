buildscript {
    ext.isCiBuild = System.getenv("CI") == "true"
    ext.isIdeBuild = project.hasProperty('android.injected.invoked.from.ide')

    ext.androidBuildConfig = [
            minSdk    : 21,
            targetSdk : 29,
            compileSdk: 29,
            buildTools: '29.0.1'
    ]

    ext.versions = [
            androidGradlePlugin: '3.6.0-alpha05',
            kotlin             : '1.3.41',
            detekt             : '1.0.0-RC16',
            mavenPublishPlugin : '0.8.0',
            kotlinx            : [
                    coroutines: '1.3.0-RC',
            ],
            androidx           : [
                    core             : '1.2.0-alpha02',
                    annotation       : '1.1.0',
                    appCompat        : '1.1.0-rc01',
                    activity         : '1.1.0-alpha01',
                    fragment         : '1.2.0-alpha01',
                    coordinatorLayout: '1.1.0-beta01',
                    recyclerView     : '1.1.0-beta01',
                    constraintLayout : '1.1.3',
                    arch             : '2.1.0-rc01',
                    lifecycle        : '2.2.0-alpha02',
                    test             : [
                            core   : '1.2.1-alpha02',
                            monitor: '1.3.0-alpha02',
                            rules  : '1.3.0-alpha02',
                            runner : '1.3.0-alpha02',
                            ext    : [
                                    junit: '1.1.2-alpha02'
                            ]
                    ],
                    espresso         : '3.3.0-alpha02'
            ],
            material           : '1.1.0-alpha09',
            rxJava2            : '2.2.10',
            rxJava3            : '3.0.0-RC1',
            rxKotlin           : '2.3.0',
            rxAndroid          : '2.1.1',
            timber             : '4.7.1',
            junit              : '4.12',
            mockk              : '1.9.3',
            kluent             : '1.53'
    ]

    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${versions.androidGradlePlugin}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${versions.detekt}"
        classpath "com.vanniktech:gradle-maven-publish-plugin:${versions.mavenPublishPlugin}"
    }
}

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
    }

    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                // Force all Kotlin stdlib artifacts to use the same version.
                if (details.requested.group == 'org.jetbrains.kotlin' && details.requested.name.startsWith('kotlin-stdlib')) {
                    details.useVersion versions.kotlin
                }
            }
        }
    }

    plugins.withType(com.android.build.gradle.BasePlugin).configureEach { plugin ->
        plugin.extension.compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }
    }

    tasks.withType(JavaCompile).configureEach { task ->
        task.sourceCompatibility = JavaVersion.VERSION_1_8
        task.targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile).configureEach { task ->
        task.kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.dsl.KotlinCompile).configureEach { task ->
        task.kotlinOptions {
            freeCompilerArgs += [
                    '-progressive',
                    '-XXLanguage:+NewInference',
                    '-Xuse-experimental=kotlin.Experimental',
            ]
        }
    }

    tasks.withType(Test).configureEach {
        maxParallelForks Runtime.runtime.availableProcessors() * 2
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }
}

subprojects {
    apply from: "$project.rootDir/gradle/detekt.gradle"
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
